c -*- fix -*-
      subroutine sugw(ssite,sspec,slat,sham,nbas,ndham,
     .  smpot,vconst,lcplxp,osig,otau,oppi,ppn,vrmt,
     .  spotx,osigx,otaux,oppix,
     .  jobgw)
C- Driver to set up GW
C ----------------------------------------------------------------------
Ci Inputs
Ci   ssite :struct for site-specific information; see routine usite
Ci     Elts read: spec pnu pz ov0
Ci     Stored:    *
Ci     Passed to: hambl hambls makusq gwcphi pwmat
Ci   sspec :struct for species-specific information; see routine uspec
Ci     Elts read: lmxa pz p idxdn a nr z rmt
Ci     Stored:    *
Ci     Passed to: hambl hambls makusq gwcphi pwmat
Ci   slat  :struct for lattice information; see routine ulat
Ci     Elts read: alat plat qlat nabc gmax npgrp nsgrp osymgr
Ci                (oistab oag)
Ci     Stored:    *
Ci     Passed to: hambl hambls makusq pwmat
Ci   sham  :struct for parameters defining hamiltonian; see routine uham
Ci     Elts read: lsig nqsig oqsig ldham oindxo
Ci     Stored:    *
Ci     Passed to: hambl hambls makusq
Ci   nbas  :size of basis
Ci   smpot :smooth potential on uniform mesh (mkpot.f)
Ci   vconst:constant to be added to potential
Ci   lcplxp:0 if ppi is real; 1 if ppi is complex
Ci   osig,otau,oppi  augmentation matrices
Ci   ppn   :potential parameters, nmto style
Ci   vrmt  :electrostatic potential at MT boundaries
Ci   jobgw :-999 prompt for and read jobgw from stdin
Ci         :0 create files SYMOPS,LATTC,CLASS,NLAindx
Ci         :1 create files gwb,gw1,gw2,gwa,vxc,evec,rhoMT.*,normchk
Ci         :2 create file  gw2.
Co Outputs
Co   Files written according to jobgw
Co   The following shows what files are written for jobgw=1
Co   and the records stored in each file.
Co   gw1:  evals of Hlda+sigma-vxc
Co        *for each q-point and spin:
Co         q, evl(i:ndimh)
Co   gw2:  evals of Hlda+sigma-vxc-vxc
Co        *for each q-point and spin
Co         q, evl(i:ndimh)
Co   gwb:  Information about eigenfunctions, matrix elements
Co         nat,nsp,ndima,ndham,alat,qlat,ef0,nqbz,plat,nqnum
Co         lmxa(1:nat), bas(1:3,1:nat)
Co         ngpmx,ngcmx  -- largest number of G vectors for psi, vcoul
Co        *for each q-point and spin:
Co           q, ndimh
Co           evec, evl, cphi
Co           ngp, ngc
Co           ngvecp, ngvecc, pwz  (G vectors for psi,vcou; PW expansion of z)
Co   gwa:  site data.
Co        *for each site:
Co           z, nr, a, b, rmt, lmaxa, nsp, ncore
Co           konfig(0:lmaxa) : note
Co           rofi
Co          *for each l, spin isp
Co             l, isp
Co             radial w.f. gval: phi
Co             radial w.f. gval: phidot
Co             radial w.f. gval: phiz    written if konfig(l)>10
Co             *for each l, spin, konf
Co                icore, l, isp, konf, ecore(icore)+vshft
Co                gcore(1:nr,1,icore)
Co   evec: eigenvectors.
Co         ndham, nsp, nnn, nqnum
Co        *for each q-point and spin:
Co           q, evec(1:ndimh,1:ndimh)
Co   vxc:  matrix elements of XC potential
Co         ndham, nsp, nnn
Co        *for each q-point and spin:
Co           q, vxc
Cl Local variables
Cl   lsig  :switch to create files vxc and evec for making sigma
Cl   lwvxc :T, write to evec and vxc files
Cl   nnn   :number of qp in full BZ
Cl   nqnum :number of qp in full BZ * number of 'special gamma points'
Cl         :or generally the number of qp at which eigenfunctions calc.
Cl   ngp   :no. G vectors for eigenfunction expansion (depends on q-pt)
Cl   ngc   :no. G vectors for coulomb interaction (depends on q-pt)
Cl   ispc  :2 when working on (2,2) block of noncollinear hamiltonian;
Cl         :otherwise 1
Cl   ipb   :index to true basis (excluding floating orbitals)
Cl         :given site index including those orbitals
Cl   ndima :number of augmentation channels
Cl   loldpw:0 use version 6 convention in calling pwmat
Cl         :1 call pwmat2 instead of pwmat
Cl         :2 call pwmat (or pwmat2) with shortened q vector
Cl         :3 both options 1 and 2
Cl         :See Remarks
Cb Bugs
Cb   code writes extra file evec whose data should be
Cb   extracted from gwb.
Cr Remarks
Cr   In version 6, the sugw passed an unshortened q to pwmat.
Cr   This cannot be used with an APW basis.
Cr   The 2's bit in loldpw controls which q is passed to pwmat.
Cr   The call to pwmat can optionally be replaced by a call to the
Cr   simpler and cleaner pwmat2 (see comments preceding the call to
Cr   pwmat or pwmat2).  However, the results are not identical.
Cr   The pwmat construction depends on both the LMTO cutoff gmax
Cr   and the GW cutoff QpGcut_psi, even though these nominally serve
Cr   the same purpose.
Cr   The pwmat2 construction depends only on the GW cutoff QpGcut_psi.
Cr   The pwmat construction is usually more accurate (i.e. the norm of
Cr   the overlap matrix is closer to 1; see output in file normchk),
Cr   because gmax is typically larger than QpGcut_psi.
Cu Updates
Cu   29 Jan 09 Incorporate APW basis
Cu   27 Mar 07 bug fix: expunging floating orbitals from class list, file CLASS
Cu   30 Aug 05 sugw handles ngp=0 and/or ngc=0
Cu    5 Jul 05 handle sites with lmxa=-1 -> no augmentation
Cu             Bug fix, job 5 case
Cu    4 Sep 04 Adapted to extended local orbitals
Cu    1 Sep 04 Adapted to handle complex ppi; S.O. put into ppi
Cu      Mar 04 (mark) small changes for bandmode
Cu      Sep 03 (takao)
Cu             Implemented job 5
Cu             read nqbz from QGpsi.  GWIN0 no longer used.
Cu   14 Sep 03 dimensioning bug fix when inequivalent lmxa
Cu   07 Jun 03 sugw redesigned for new interpolation mode for sigma
Cu             jobs 1 and 2 have been combined.
Cu             Altered argument list.
Cu   20 Jun 02 (S. Faleev) write vxc to disk
Cu   18 Jun 02 Added debugging code to check call to roth
Cu   25 Apr 02 Added local orbitals
Cu   25 Oct 01 (T. Kotani) split functions into parts, with job
Cu             Binary files imcompatible with prior versions.
Cu   23 Apr 01 First created
C ----------------------------------------------------------------------
C     implicit none
C ... Passed parameters
      integer nbas,ndham,n0,nkap0,nppn,lcplxp
      parameter (n0=10, nppn=12, nkap0=3)
      integer jobgw,osig(3,nbas),otau(3,nbas),oppi(3,nbas),lh(n0)
      integer osigx(3,nbas),otaux(3,nbas),oppix(3,nbas)
      real(8) ssite(1),sspec(1),slat(1),sham(1),rsml(n0),ehl(n0),
     .  ppn(nppn,n0,nbas),vconst,smpot(1),spotx(1),vrmt(nbas)
C ... Local parameters
      logical :: bandmode=.false.,endofline=.false.,lwvxc
      logical cmdopt
      integer fopna,fopnx,i,i1,i2,iat,ib,ibr,icore,ierr,ifeigen,ifi,
     .  ifiqg,ifiqgc,iflband(2),ifqeigen,ifsyml,igets,igetss,iix,iline,
     .  im1,im2,ipb(nbas),ipqn,ipr,iprint,iq,is,isp,ispc,j,job,jobb,k1,
     .  k2,k3,konf,konfig(0:n0),l,lchk,ldham(8,2),ldim,loldpw,
     .  lgunit,lmaxa,lmxax,lpdiag,lrsig,lsig,mx,mxint,n1,n2,n3,nat,
     .  ncore,ndima,ndimh,nevl,nev,ngabc(3),ngc,ngcmx,nglob,ngp,ngp_p,
     .  ngpmx,nline,nlinemax,nlmax,nmx,nn1,nn2,nnn,npgrp,
     .  nphimx,npqn,nqbz,nqibz,nqnum,nqnumx,nqtot,nr,nsgrp,nsp,nspc,
     .  stdo
C     integer lshft(3)
      integer oaus,og,oiprmb,ov0,oww
      equivalence (n1,ngabc(1)),(n2,ngabc(2)),(n3,ngabc(3))
      equivalence (ldim,ldham(1,1))
      real(8) q(3),QpGcut_psi,QpGcut_cou,dum,dval,
     .  xx(5),gmax,pnu(n0,2),pnz(n0,2),ecore(50),a,z,rmt(nbas),b,vshft,
     .  alat,alfa,ef0,plat(3,3),qlat(3,3),qp(3),qpos,qx(3),q_p(3),
     .  epsovl,dgets
      integer ,allocatable:: ips(:),ipc(:),ipcx(:),lmxa(:),
     .  nlindx(:,:,:),ngvecp(:,:),ngvecp_p(:,:),ngvecc(:,:)
      integer,allocatable :: konft(:,:,:),iiyf(:),ibidx(:,:),nqq(:)
      real(8) ,allocatable:: wk(:,:),
     .  bas(:,:),rofi(:),rwgt(:),gcore(:,:,:),gval(:,:,:,:,:),evl(:,:)
      real(8),allocatable:: ovv(:,:),evl_p(:,:),
     .  qq1(:,:),qq2(:,:),cphin(:,:,:)
      complex(8),allocatable:: ham(:,:),ovl(:,:),evec(:,:),vxc(:,:),
     .  ppovl(:,:),phovl(:,:),pwh(:,:),pwz(:,:),pzovl(:,:),
     .  testc(:,:),testcd(:),ppovld(:),cphi(:,:,:),cphi_p(:,:,:),
     .  geig(:,:,:),geig_p(:,:,:)
      integer ltab(n0*nkap0),ktab(n0*nkap0),offl(n0*nkap0),norb
      integer ndhamx,nspx,nnnx,ifiv
      character strn*120


C ... For PW basis
      integer oigv2,okv
      integer pwmode,napw
      double precision pwemin,pwemax,pwgmin,pwgmax,eomin

C ... for reading self-energy
      integer nqsig
      integer oqsig

C ... for band plotting
      real(8),allocatable :: ovvx(:,:,:)
      real(8) ::ovvpp
      integer idxdn(n0,nkap0)
      character lsym(0:n0-1)*1, lorb(3)*1, dig(9)*1, strn4*4
      data lsym /'s','p','d','f','g','5','6','7','8','9'/
      data lorb /'p','d','l'/
      data dig /'1','2','3','4','5','6','7','8','9'/

C      integer jfi
C      integer,allocatable::  ngvecp_(:,:),ngvecc_(:,:)
C      real(8),allocatable:: evl_(:,:)
C      complex(8),allocatable:: evec_(:,:),cphi_(:,:,:),pwz_(:,:)

C ... Heap
      integer w(1)
      common /w/ w

      real(8):: dnn(3),qlatinv(3,3),qout(3),qtarget(3),qrr(3),axx,bxx,qxxx(3),qxx1(3),qxx2(3)
      integer:: inn(3),iqzz,nqzz,iiiii

      logical :: debug=.false.
      complex(8),allocatable:: evecout(:,:),evecr(:,:)

      real(8),allocatable:: qzz(:,:)

      do  iq = 1, nqtot
        if (abs(sum(q-qx)) .gt. 1d-10) then
          print *, q
          print *, qx
          call rx(' sugw : abs(sum(q-qx))>1d-10')
        endif
        enddo 
      end

