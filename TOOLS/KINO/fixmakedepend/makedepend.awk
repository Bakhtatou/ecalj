BEGIN{
   thisprogram="makedepend.awk"
   today=strftime("%F %H:%M:%S");
   g_n_usefilelist=0;
   g_n_modulelist=0;

   load_modulelist();
#   prt_modulelist();

   load_uselist();
   change_usemodulenamelist();
#   prt_uselist();

   prt_makedepend();
}

func change_prefix(name)
{
   sub("^fp/","$(fp_obj_path)/",name);
   sub("^subs/","$(subs_obj_path)/",name);
   sub("^gwd/","$(gwd_obj_path)/",name);
   sub("^slatsm/","$(sla_obj_path)/",name);
   return name
}

func load_uselist( file,line,ret,filename,modulename)
{
   file="uselist"

   line=0;
   while(1) {
     ret=getline < file;

     if (ret<=0) { break; } 

     filename=$1 
     sub(":$","",filename);
     sub("[.]F$",".o",filename);
     sub("[.]f$",".o",filename);
     filename=change_prefix(filename);

     modulename=$3
     sub(",$","",modulename);
     if (modulename=="ifport") {
       continue;
     }

     add_uselist(filename,modulename)
     line++;
  }

  close(file);
# print file,line, "read"
}

func load_modulelist(  file,line,ret,filename,modulename)
{
   file="modulelist"
   line=0;
   while(1) {
     ret=getline < file;

     if (ret<=0) { break; }

     filename=$1
     sub(":$","",filename);
     sub("[.]F$",".o",filename);
     sub("[.]f$",".o",filename);
     filename=change_prefix(filename);

     modulename=$3
     sub(",$","",modulename);

   add_modulelist(filename,modulename)
   line++;
   }
#  print file,line, "read"
}

#############################################

func add_modulelist(filename,modulename,  i )
{
#   for (i=1;i<=g_n_modulelist; i++) {
#      if ( modulelist[i,0]==filename ) {
#         return;
#      }
#   }
   g_n_modulelist++;
   i=g_n_modulelist; 
   modulelist[i,0]=filename
   modulelist[i,1]=modulename
}

func prt_modulelist( i)
{
  print "prt_modulelist",g_n_modulelist;
 for (i=1;i<=g_n_modulelist; i++) {
    print i,modulelist[i,0],modulelist[i,1];
 }

}

func  find_modulelist(name , i)
{
  for (i=1;i<=g_n_modulelist;i++) {
    if ( modulelist[i,1]==name) {
     return i;
    }
  }
  print "failed to find ",name, " in modulelist"
  exit(0);
}


##############################################

func prt_makedepend(  i,j)
{

   print "#prt_makedepend, generated by ",thisprogram,",", today;
   for (i=1;i<=g_n_usefilelist;i++) {
      printf("%s :", usefilelist[i,0]);
      for (j=1;j<=usemodulenamelist[i,0];j++) {
        printf("%s ",  usemodulefilelist[i,j]);
      }
      print " ";
   }

}



func prt_uselist(  i,j)
{

   print "prt_uselist";
   for (i=1;i<=g_n_usefilelist;i++) {
      print i,usefilelist[i,0];
      for (j=1;j<=usemodulenamelist[i,0];j++) {
        print "   ",j,usemodulenamelist[i,j], usemodulefilelist[i,j];
      }
   }

}

func change_usemodulenamelist(  i,j,ifile)
{
   for (i=1;i<=g_n_usefilelist;i++) {
#      print i,usefilelist[i,0];
      for (j=1;j<=usemodulenamelist[i,0];j++) {
        ifile= find_modulelist(usemodulenamelist[i,j]); 
        usemodulefilelist[i,j]= modulelist[ifile,0]
      }
   }

}

func add_uselist(filename,modulename,   ifile)
{
     ifile=find_usefilelist(filename);
     add_usemodulelist(ifile,modulename)
}

func find_usefilelist(filename,   i)
{
  for (i=1;i<=g_n_usefilelist;i++) {
     if ( usefilelist[i,0]==filename) {
         return i;
     }
  }
  g_n_usefilelist++;
  i=g_n_usefilelist; 
  usefilelist[i,0]=filename;
  usemodulenamelist[i,0]=0;
  return i;
}

func add_usemodulelist(ifile,modulename, i,n )
{

  n=usemodulenamelist[ifile,0]
  for (i=1;i<=n;i++) {
     if ( usemodulenamelist[ifile,i]==modulename) {
         return ;
     }
  }
  usemodulenamelist[ifile,0]++;

  n=usemodulenamelist[ifile,0];
  usemodulenamelist[ifile,n]=modulename;

}

