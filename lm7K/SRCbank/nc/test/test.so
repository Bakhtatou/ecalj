#!/bin/csh -f

# This file is a shell script to test that spin-orbit coupling works

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias runrdcmd 'set retcall = \!\!:1; set rdcmdfmt = \!\!:2 ; set outfile = \!\!:3 ; set callarg = \!\!:4 ; goto runrdcmd'
alias findcmd  'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set make_path = \!\!:4 ; goto findcmd'
alias compare_res 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set refvar = \!\!:4 ; set tol = \!\!:5 ; set passvar = \!\!:6 ; goto compare_res'
alias compare_res_0 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set tol = \!\!:4 ; set passvar = \!\!:5 ; goto compare_res_0'
alias cnvt_d_fmt  'set retcall = \!\!:1; set testvar = \!\!:2 ; set testval = \!\!:3 ; goto cnvt_d_fmt'

set a
set slow
set testfile = $0
set testdir = $testfile:h
#set topdir  = `cd $testdir/../..; pwd`
set topdir  = `$testdir/../../startup/absolute-path $testdir/../..`
set maindir = $topdir/main
set space = '        '
set failed = 0

# Prepend current working-directory, top-level dir and maindir to path
set path = ($cwd $topdir $maindir $path)

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--add0":
      set ladd0
      breaksw
    case "--downfold":
      set downfold
      breaksw
    case "--clean":
      set clean
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    case "--all":
      breaksw
    default:
      echo unrecognized switch $arg1
      echo 'usage: test.so [switches] [test-list]'
      echo '       test-list is a list of test cases, e.g., run tests 1 and 2 with'
      echo '       "test.so 1 2"'
      echo '       switches:'
      echo '       --no-iactive runs tests without prompting user'
      echo '       --quiet runs tests without prompting user'
      echo '       --verbose    script prints out extra information'
      echo '       --clean      cleans up files'
      echo '       --downfold   invokes downfolding tests'
      exit -1
  endsw

end

set joblist = ($argv)
if ($#joblist == 0 ) set joblist = (1 2 3 4 5 6 7)

echo $joblist | grep 1 >/dev/null
if ($status) goto chk1e
cat <<EOF

--- Test 1.  Input file ctrl.cdte ---
             The experimental spin-orbit splitting of the valence
             bands is 890 meV.  Compare to -0.1868--0.2528 = 897 meV.
             This input file is fully self-consistent
             without spin-orbit splitting.  Thus the deviation from
             self-consistency is a measure of how much the spin-orbit
             coupling affects the charge density.
             NB: test destroys or changes files *.cdte

EOF
if ($?downfold) then
cat <<EOF
             In the downfolding case, the ES d orbitals are downfolded.
             In general the noncollinear result WITHOUT spin-orbit turned on
             does not exactly reproduce the collinear result because the 
             noncollinear downfolding spin-averages the downfolding channels.
             In this case the spin channels' potential are not distinct so
             the noncollinear and collinear results are the same.  You can
             verify this after running this test by comparing these jobs:
                 lm -vnc=f -vso=f -vidx=2 cdte --pr31,20
                 lm -vnc=t -vso=f -vidx=2 cdte --pr31,20

EOF
endif
call query chk11 'run this test'
chk11:
set pass
if ($a == "s") goto chk1e
# ... Look for executables
findcmd chk11a rdcmd "$path" "optional"
chk11a:
findcmd chk11b lm "$path" "$topdir"
chk11b:
findcmd chk11c lmstr "$path" "optional"
chk11c:
set refout=$testdir/out.cdte.gz  testout=out.cdte testcat=TEST
if ($?downfold) then
set refout=$testdir/out.cdte.dnf.gz  testout=out.cdte testcat=TESTDNF
endif
echo "$space rm -f *.cdte ; cp $testdir/ctrl.cdte ."
             rm -f *.cdte ; cp $testdir/ctrl.cdte .
if ($?clean) then
  echo "$space rm -f ctrl.cdte $testout"
               rm -f ctrl.cdte $testout
  goto chk1e
endif
runrdcmd chk12 %11f $testout "-cat:$testcat --noerr ctrl.cdte"
chk12:
#  runjob chk12 /dev/null "lmstr cdte"
#  chk12:
#  runjob chk13 out.cdte "lm -vso=t cdte"
#  chk13:
#  echo "$space Program lm returned successfully."
if ($?ladd0) then
 echo -n "         ..." ; $testdir/add0 $testout
endif

set refline = `gunzip -c $refout | awk '{if ($1 == "SECMAT:") {getline;getline;print}}' | head -1`
set soref = `echo $refline | awk '{print int(($6-$5)*13.6*1000)}'`
set outline = `cat $testout | awk '{if ($1 == "SECMAT:") {getline;getline;print}}' | head -1`
set sogam = `echo $outline | awk '{print int(($6-$5)*13.6*1000)}'`

if ($?quiet) goto chk15
echo ' '
echo "$space Compare bands at Gamma to file $refout":
cat $testout | awk '{if ($1 == "SECMAT:") {getline; print;getline;print;getline;print}}' | head -3
echo '---'
zcat $refout | awk '{if ($1 == "SECMAT:") {getline; print;getline;print;getline;print}}' | head -3
set sodif = `echo $sogam $soref  | awk '{{k=($1-$2)>0?($1-$2):($2-$1);} printf "%10.2E", k}'`
echo ' '
echo "$space Spin-orbit splitting of valence bands at gamma =  $sogam meV"
echo "$space Spin-orbit splitting of reference              =  $soref meV"
echo "$space                                     difference =  $sodif"

call showout chk14 CPU
chk14:
call showout chk15 SV
chk15:
if ($status) echo " ... abort ...: file $testout does not contain SV line\!"

# pass checks
echo ' '
set refline = `gunzip -c $refout | grep SV`
set outline = `grep SV $testout`
set eref  = `echo $refline | awk '{print substr($6,1,9)}'`
set etest = `echo $outline | awk '{print substr($6,1,9)}'`
set dqref  = `echo $refline | awk '{print $3}'`
set dqtest = `echo $outline | awk '{print $3}'`

cnvt_d_fmt chk16a eref $eref
chk16a:
cnvt_d_fmt chk16b etest $etest
chk16b:
cnvt_d_fmt chk16c dqref $dqref
chk16c:
cnvt_d_fmt chk16d dqtest $dqtest
chk16d:

set tol = 1e-6
compare_res chk17a "ehk" $etest $eref $tol pass
chk17a:

set tol = 1e-6
compare_res chk17b "RMS dq" $dqtest $dqref $tol pass
chk17b:

set tol = 1
compare_res chk17c "VB splitting at Gamma" $sogam $soref $tol pass
chk17c:

#  if ("$refline" == "$outline") then
#    echo " ... VB splitting at Gamma equivalent? ..." yes
#  else
#    echo " ... VB splitting at Gamma equivalent? ..." no
#    unset pass
#  endif

if ($?pass) then
    echo " ... test 1 PASSED"
else
    echo " ... test 1 FAILED"
  set failed = ($failed 1)
endif


chk1e:

echo $joblist | grep 2 >/dev/null
if ($status) goto chk2e
cat <<EOF

--- Test 2.  Compare spin-orbit coupling in magnetic Fe ---
             This input file is fully self-consistent
             without spin-orbit splitting.  Thus the deviation from
             self-consistency tells you how much the spin-orbit
             splitting affects the charge density.

EOF
if ($?downfold) then
cat <<EOF
             In the downfolding case, the f orbitals are downfolded.
             The noncollinear result WITHOUT spin-orbit turned on
             does not exactly reproduce the collinear result because
             the downfolded f orbitals' potential parameters are
             spin-averaged.  However, the error it produces
             (1e-4 in rms charge, 7e-5 Ry) is small in comparison to both
             the effect of downfolding and the spin-orbit perturbation.
EOF
endif
call query chk21 'run this test'
chk21:
set pass
if ($a == "s") goto chk2e
# ... Look for executables
findcmd chk21a rdcmd "$path" "optional"
chk21a:
findcmd chk21b lm "$path" "$topdir"
chk21b:
findcmd chk21c lmstr "$path" "optional"
chk21c:
set refout=$testdir/out.feso.gz  testout=out.feso testcat=TEST
if ($?downfold) then
set refout=$testdir/out.feso.dnf.gz  testout=out.feso testcat=TESTDNF
endif
if ($?clean) then
echo "$space rm -f *.{feso,feso.dnf} $testout"
             rm -f *.{feso,feso.dnf} $testout
  goto chk2e
endif
echo "$space rm -f *.feso ; cp $testdir/*.{feso,feso.dnf} ."
             rm -f *.feso ; cp $testdir/*.{feso,feso.dnf} .
runrdcmd chk22 %11f out.feso "-cat:$testcat --noerr ctrl.feso"
chk22:
echo "$space Program lm returned successfully."
if ($?ladd0) then
 echo -n "         ..." ; $testdir/add0 $testout
endif
if ($?quiet) goto chk25
echo ' '
echo "$space Compare bands at Gamma to file $refout":
cat $testout | awk '{if ($1 == "SECMAT:") {getline; print;getline;print}}' | head -2
echo '---'
gunzip -c $refout | awk '{if ($1 == "SECMAT:") {getline; print;getline;print}}' | head -2


call showout chk24 CPU
chk24:
call showout chk25 SV
chk25:
if ($status) echo " ... abort ...: file $testout does not contain SV line\!"

set refline = `gunzip -c $refout | grep SV`
set outline = `grep SV $testout`
set eref  = `echo $refline | awk '{print substr($6,1,11)}'`
set etest = `echo $outline | awk '{print substr($6,1,11)}'`
set dqref  = `echo $refline | awk '{print substr($3,1,3)}'`
set dqtest = `echo $outline | awk '{print substr($3,1,3)}'`

# pass checks
echo ' '

set refline = `gunzip -c $refout | grep SV`
set outline = `grep SV $testout`
set eref  = `echo $refline | awk '{print substr($6,1,9)}' | tail -1`
set etest = `echo $outline | awk '{print substr($6,1,9)}' | tail -1`
set dqref  = `echo $refline | awk '{print $3}' | tail -1`
set dqtest = `echo $outline | awk '{print $3}' | tail -1`

cnvt_d_fmt chk26a eref $eref
chk26a:
cnvt_d_fmt chk26b etest $etest
chk26b:
cnvt_d_fmt chk26c dqref $dqref
chk26c:
cnvt_d_fmt chk26d dqtest $dqtest
chk26d:

set etest = -0.481100
if ($?dqtol2 == 0) set dqtol2 = 1e-6
if ($?detol2 == 0) set detol2 = 1e-6

compare_res chk27a "ehk" $etest $eref $detol2 pass
chk27a:

compare_res chk27b "RMS dq" $dqtest $dqref $dqtol2 pass
chk27b:

if ($?pass) then
    echo "$space test 2 PASSED"
else
    echo "$space test 2 FAILED"
    set failed = ($failed 2)
endif

chk2e:

echo ' '
if ($#failed <= 1) then
    echo "$space $testfile : all tests PASSED"
    echo " "
    exit 0
else
    shift failed
    echo "$space $testfile : These tests FAILED:" $failed
    echo " "
    exit -1
endif

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space Compare $callarg to line in file $refout":
  grep $callarg $testout
  gunzip -c $refout | grep $callarg
  goto $quitjob

# ---------------- cnvt_d_fmt --------------
# converts exponential format #.##D## or #.##d## to #.##E##
# usage: cnvt_d_fmt retcall testvar testval
exit
cnvt_d_fmt:
  set quitjob = $retcall
  set $testvar = `echo $testval | sed s/D/E/ | sed s/d/E/`
  goto $quitjob

# ---------------- compare_res --------------
# Compares two numbers $testvar-$refvar and unsets $passvar if |testvar-refvar|<tol
# usage: compares_res retcall keyword testvar refvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   refvar       : second number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar-refvar|<tol
exit
compare_res:
  set quitjob=$retcall
# echo $retcall $keyword $testvar $refvar $tol $passvar
  echo -n "$space $keyword ($testvar) within tol ($tol) of reference ($refvar)? ... "
  if (`echo $testvar $refvar | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);tl=1.001*tol} print (k<=tl)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- compare_res_0 --------------
# Compares a number $testvar and unsets $passvar if |testvar|<tol
# usage: compares_res_0 retcall keyword testvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar|<tol
exit
compare_res_0:
  set quitjob=$retcall
#  echo $retcall $keyword $testvar $tol $passvar
 echo -n "$space $keyword ($testvar) smaller than tol ($tol)? ... "
  if (`echo $testvar 0 | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- runrdcmd --------------
exit
runrdcmd:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space Invoking rdcmd will execute the following job(s):"
    $rdcmd -f:$rdcmdfmt --n $callarg
    echo "$space $rdcmd '-f:rdcmd:%2f' $callarg"
                 $rdcmd '-f:rdcmd:%2f' $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      exit
#      $callarg >> $appfile
      set retval = $status
    else
      echo "$space Invoking rdcmd will execute the following job(s):"
      $rdcmd -f:$rdcmdfmt --n $callarg
      echo "$space $rdcmd '-f:#rdcmd:%2f' $callarg  >& $outfile"
                   $rdcmd '-f:rdcmd:%2f' $callarg >& $outfile
      set retval = $status
      if ($retval == 0) then
        echo "$space Job(s) completed successfully; output in $outfile"
      endif
    endif
  endif

  if ($retval == 0) then
    if ($?ladd0) then
      echo -n "         ..." ; $testdir/add0 $testout
    endif
    goto $quitjob
  else
    echo "$space ...oops... the following command returned with nonzero exit status:"
    echo -n "$space   "
    grep $rdcmd: $outfile | tail -1 | sed 's/rdcmd:  //'
    goto cleanup
  endif

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... no executable $prog_cmd found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space *hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  goto $retcall

# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space"'*'"job $callarg[1] returned with error status $retval"
  if ($retval != 0) echo "$space unacceptable error status ... $testfile aborting"
  exit $retval
