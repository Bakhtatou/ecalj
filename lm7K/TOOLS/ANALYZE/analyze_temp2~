#!/usr/bin/python2
# This routine checks module-dependency in fortran90 and compile them in right order.
#
import os
import sys
import string
import re
import glob

#---------------------
def rsp(dat):
	dat= re.sub(' '  ,'',dat)
	return dat


def connect(alist):
	result=''
	for lll in alist:
		result = result + ' ' + lll
	return result

def uniqlist(input): # uniq
	output = []
	for i in input:
		if not i in output:
			output.append(i)
	return output

def skipc(flines,fin):  #  remove comment, treat continuous lines,
	            #  and make list [number 
	re_nocomm = re.compile('^\ *subroutine', re.IGNORECASE)
	re_char   = re.compile('("[^"]*")|(\'[^\']*\')')
#	re_pa     = re.compile('\(.[^\)]*\)')
	il=0
	ilo=1
	flo=''
	floo=''
	fff =[]
	for fl in flines:
		il=il+1
		if(not re.search('^ ',fl[0:1])): continue  # skip comment line
		flx = re_char.sub('@@@',fl) #
		flx = re.split('!',flx)[0]
#		flx = re_pa.sub('(...)',flx) #
		if(re.search(' ',fl[5:6]) and il!=1):
			flo  = re.sub('^ *','',flo) 
			flo  = re.sub(' +',' ',flo) 
			flo  = re.sub('end *do','enddo',flo, re.IGNORECASE) 
			flo  = re.sub('end *if','endif',flo, re.IGNORECASE) 
			fff.append([fin,ilo,flo,floo])
			flo =  flx    #new sentence start
			floo=  fl +'\n'   #new sentence start
			ilo= il
		else:   #continuous line            
			flo= flo + flx[6:]
			floo= floo + fl + '\n'
	flo  = re.sub('^ *','',flo) 
	flo  = re.sub(' +',' ',flo) 
	fff.append([fin,ilo,flo,floo])
	return fff
	
#tmp ='chekckmodule.tmp'
#tmp = 'tmp'
#print '######### check module ############# ',sys.argv[1:]
#src  = connect(sys.argv[1:])
#print '######### check module ############# src =', src
#fff = os.system(zzz+ ' > ' + tmp)
tmp = 'makedat'
oxx = string.split(open(tmp,'rt').read(),'\n')
ix=0
re_mod      =  re.compile('^\ *module', re.IGNORECASE)
re_call     =  re.compile('^\ *call', re.IGNORECASE)
rcall       =  re.compile('call', re.IGNORECASE)
re_function =  re.compile( \
	'((^\ *(complex|real|double|charecter|integer|logical)[^!]* *function))', re.IGNORECASE)
re_function2 =  re.compile( \
	'((^\ *function))', re.IGNORECASE)
re_end =       re.compile( '((^\ *end(\Z| )))', re.IGNORECASE)
re_end_mod =   re.compile( '((^\ *end *module))', re.IGNORECASE)
re_end_sub =   re.compile( '^\ *end(\Z| )', re.IGNORECASE)
re_contains =  re.compile( '((^\ *contains))', re.IGNORECASE)
re_subroutine= re.compile( '^\ *subroutine', re.IGNORECASE)
re_entry     = re.compile( '^\ *entry', re.IGNORECASE)

reff         = re.compile('function', re.IGNORECASE)
rsub         = re.compile( 'subroutine', re.IGNORECASE)
rent         = re.compile( 'entry', re.IGNORECASE)


### Find all fortran files.
ffiles=[]
for iline in oxx:
	ix=ix+1
#	if(iline[0:3]!='ifc'): continue
	offf = re.split(' +',iline)
	for iff in offf[1:]:
		if(re.search('\.o',iff)):
			ffile = re.sub('\.o','.F',iff)
			ffiles.append(ffile)
#			print ffile
ffiles = uniqlist(ffiles)



####################################################
# test
ffiles='../main/hx0fp0.m.F ../gwsrc/pointops.F ../gwsrc/tetwt4.F \
../gwsrc/genallcf_mod.F   ../gwsrc/readeigen.F'
ffiles = re.split(' +',ffiles)
print ffiles
####################################################



### skip comments
ix=0
#fall=[]
sdef={}
mdef={}
for ffilein in ffiles:
	ix=ix+1
	print 
	print ffilein ," -------------------------"
	flines = string.split(open(ffilein,'rt').read(),'\n')
	flines = skipc(flines,ffilein) #flines are list
### for ffile in ffiles:
#	fall.append(flines)

### find subroutines and range
#for ff in fall: #ff contains line data for each file
	fdat= flines[0]
	fff = ['main',fdat[0],fdat[1],fdat[3]]
	level=0
	sstack=[]
	sstack.append(fff)
	for fdat in flines:
		fline =fdat[2]
		if(  re_mod.search(fline)):
			level=level+1
			subname= rsp( re.split('module ',fline)[1] )
			fff= [subname,fdat[0],fdat[1],fdat[3]]
			sstack.append(fff)
		elif(re_end_mod.search(fline)): #module
			level=level-1
			fff = sstack.pop()
			mdef[fff[0]]= fff[1:3] + [fdat[1]] + [fff[3]] #add range end
		elif(re_subroutine.search(fline) ):
			level=level+1
			subname= string.split( rsub.split(fline)[1],"(" )[0]
			subname= rsp(subname)
			fff= [subname,fdat[0],fdat[1],fdat[3]]
			sstack.append(fff)
		elif(re_entry.search(fline) ):
			level=level+1
			subname= string.split( rent.split(fline)[1],"(" )[0]
			subname= rsp(subname)
			fff= [subname,fdat[0],fdat[1],fdat[3]]
			sstack.append(fff)
		elif(re_function.search(fline) or re_function2.search(fline) ):
			level=level+1
			subname= string.split( reff.split(fline)[1],"(" )[0]
			subname= re.sub(' '  ,'',subname)
			fff= [subname,fdat[0],fdat[1],fdat[3]]
			sstack.append(fff)
		elif(re_end_sub.search(fline)):
			level=level-1
			fff = sstack.pop()
			if(sdef.has_key(fff[0])):
				print ' subroutine:: ',subname,sdef[subname]
				print ' subroutine:: ',[fdat[0],fdat[1],fdat[3]]
				print " ERROR: duplicated subroutine name ..."
				for x in sdef:
					print x
				sys.exit()
			sdef[fff[0]]= fff[1:3] + [fdat[1]] + [fff[3]] #add range end
		else:
			continue

		print  (' %5i ' % fdat[1]) + ( '%2i ' %  level),fdat[2]


#		if( re_contains.search(fline)):	level=level+1
# skip internal procedure
#		if( re_contains.search(fline)):	level=level+1
#		if( re_end_mod.search(fline)):	contains=0
#		if( contains==1) : continue

# 		if(  re_mod.search(fline) ):
# 		elif(re_end_mod.search(fline)): #module
# 		elif(re_subroutine.search(fline) ):
# 		elif(re_entry.search(fline) ):
# 		elif(re_function.search(fline) or re_function2.search(fline) ):
# 		elif(re_end_sub.search(fline)):
# #			print 'zzz: ', sdef(subname)
# #			subname='zzzzz'
# 		else:
# 			continue
sys.exit()
#####################3####################
print '################## subroutine ######################'
for i in sdef:
	print i+': ',sdef[i][0:3]
	print sdef[i][3]

##########################################
print '################## module ##########################'
for i in mdef:
	print i+': ',mdef[i][0:3]
	print mdef[i][3]
sys.exit()




#xxxxxxxxxxxxxxxxx under construction xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

















### find subroutine call
print '\n ### finding subroutine call'
scall={}
for fdat in fall:
	fline =fdat[2]
	if(re_call.search(fline) ):
		subname= string.split( rcall.split(fline)[1],"(" )[0]
	else:
		continue
	subname = re.sub(' '  ,'',subname)
	scall[subname]= [fdat[0], fdat[1],fdat[3]]

####################
for i in scall:
	print i,scall[i][0],scall[i][1]
#	print scall[i][2]
####################


### call tree.
for sub in sdef:
	print
	print sub,sdef[sub][0],sdef[sub][1]
	
sys.exit()

### find function definitions
fdef={}
for fdat in fall:
	fline=fdat[2]
	if(re_function.match(fline) or re_function2.match(fline) ):
		funname= string.split( reff.split(fline)[1],"(" )[0]
		funname= re.sub(' '  ,'',funname)
		fl  = re.sub('^ *','',fdat[3]) 
		fl  = re.sub(' +',' ',fl) 
		fdef[funname]= [fdat[0], fdat[1],fl]

for i in fdef:
	print i,fdef[i][0],fdef[i][1]
	print '  ',fdef[i][2]



sys.exit()





























# #					print iline, ':::' +fline #+fline[5:6]
#		if(re_module.match(fline)): print ffile,iline, fline
#		if(re_subroutine.match(fline)  ): print ffile,iline, fline
#		if(re_call.match(fline)  ): print ffile,iline, fline
#		if(re_entry.match(fline)  ): print ffile,iline, fline




# 			flines = string.split(open(ffile,'rt').read(),'\n')
# 			iline=0
# 			for fline in flines:
# 				if(re.search('^ ',fline[0:1])):
# 					iline=iline+1
# #					print iline, ':::' +fline #+fline[5:6]
# 					if(re_module.match(fline)): print ffile,iline, fline
# 					if(re_subroutine.match(fline)  ): print ffile,iline, fline
# 					if(re_call.match(fline)  ): print ffile,iline, fline
# 					if(re_function.match(fline)  ): print ffile,iline, fline
# 					if(re_entry.match(fline)  ): print ffile,iline, fline


#					if(re.search('\S',fline[6:7])):
#						iline=iline+1
#					else:
#						pass
#					print iline, ':::' +fline #+fline[5:6]

			
#			iline=0
#			for fline in flines:
#				iline=iline+1
#				if(re_module.match(fline)): print 'FF: ',iline, fline
#				if(re_call.match(fline)  ): print 'FF: ',iline, fline


# 	modulef = string.replace(string.split(iline)[0],':','')
sys.exit()


zzz='ls -1 gwsrc/*.F main/*.F nfpsrc/*.F slatsmlib/*.F tote/*.F Miyake/maxloc/*.F'
fff = os.system(zzz+ ' > ' + tmp)
oww = string.split(open(tmp,'rt').read(),'\n')
ix=0
for ilinex in oww:
	ix=ix+1
	if(len(ilinex)==0): continue
	print 'aaaaa: '+ ilinex
	string.split(open(tmp,'rt').read(),'\n')
	if(ix==1): sys.exit()



#os.system("make ")
zzz='grep -i --regexp="^\ *[Mm][Oo][Dd][Uu][Ll][Ee]" ' + src + ' >' + tmp
os.system(zzz)
oxx = open(tmp,'rt').read()
oxx = string.split(oxx,'\n')
Rule={}
for iline in oxx:
	if(len(iline)==0): continue
	modulef = string.replace(string.split(iline)[0],':','')
	print ' === Module', string.split(iline)[2],' is defined in ', modulef

	zzz= 'grep -i ' + string.split(iline)[2] + ' ' + src +'|grep -i use'
	os.system( zzz +' > ' + tmp)
	oww = string.split(open(tmp,'rt').read(),'\n')
	for ilinex in oww:	
		if(len(ilinex)==0): continue
		usef = string.split(string.replace(ilinex,':',' '))[0]
#		print  ' Rule   ', modulef,' < ',usef
		if(Rule.has_key(modulef) !=1):
			aaa=[]
			Rule[modulef]= aaa + [usef]
		elif(modulef != usef):
			aaa = Rule[modulef]
			Rule[modulef]= aaa + [usef]

####print ' --- Obtained Rules --- '
####for k in Rule.keys():
####	print k, '< ', Rule[k]
print '------------------------'

vvv=[]
for k in Rule.keys():
	vvv=vvv+Rule[k]
i=-1
RuleN={}
for f0 in Rule.keys():
	if(vvv.count(f0)>0): continue

	fin = f0
	for fout in Rule[fin]:
		print ' rule: ', fin,fout
		i=i+1
		RuleN[i]= [ fin,fout ]
		fin2 = fout
		if(Rule.has_key(fin2)):
			for fout2 in Rule[fin2]:
				nn=5
				print nn*" "+' rule: ', fin2,fout2
				i=i+1
				RuleN[i]=[fin2,fout2]


				fin3 = fout2
				if(Rule.has_key(fin3)):
					for fout3 in Rule[fin3]:
						nn=10
						print nn*" "+' rule: ', fin3,fout3
						i=i+1
						RuleN[i]=[fin3,fout3]

	
						fin4 = fout3
						if(Rule.has_key(fin4)):
							for fout4 in Rule[fin4]:
								nn=15
								print nn*" "+' rule: ', fin4,fout4
								i=i+1
								RuleN[i]=[fin4,fout4]
								

								fin5 = fout4
								if(Rule.has_key(fin5)):
									for fout4 in Rule[fin5]:
										nn=15
										print nn*" "+' rule: ', fin5,fout5
										i=i+1
										RuleN[i]=[fin5,fout5]


										fin6 = fout5
										if(Rule.has_key(fin6)):
											print 'Too deep dependency for checkmodule---modify check module!'

										
####for f0 in Rule.keys():
####	if(vvv.count(f0)>0): continue
####	os.system("make " + string.replace(f0,'.F','.o'))
aaa=''
for irule in range(len(RuleN)):
	f0 = RuleN[irule][0]
	f1 = RuleN[irule][1]
	f0o = re.sub('.F$','.o', RuleN[irule][0])
	f1o = re.sub('.F$','.o', RuleN[irule][1])
#	print ' Rule:  older;newer =', f0o,';',f1o
	aaa=aaa +f1o+':'+f0o+'\n'
oxx = open("moduledepends.inc",'wt')
oxx.write(aaa)

sys.exit()

#print '--------------------------------------'


######################################################
#### All files are compiled from .f to .o ############
######################################################
repeatmake=0
for irule in range(len(RuleN)):
	f0 = RuleN[irule][0]
	f1 = RuleN[irule][1]
	f0o = re.sub('.F$','.o', RuleN[irule][0])
	f1o = re.sub('.F$','.o', RuleN[irule][1])
	
#check 0	
	make0=0
	if(os.access(f0o,os.F_OK)==0 ): make0=1
	os.system('ls -rt '+ f0o +' '+ f0  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
	if(occ[0]== f0o):make0=1
	if(make0==1):
#		os.system("rm   "+ f0o )
#		os.system("make "+ f0o )
		repeatmake=1
#check 1	
	make1=0
	if(os.access(f1o,os.F_OK)==0 ): make1=1
	os.system('ls -rt '+ f1o +' '+ f1  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
	if(occ[0]== f1o):make1=1
	if(make1==1):
#		os.system("rm   "+ f1o )
#		os.system("make "+ f1o )
		repeatmake=1

#check f0o < f1o	
	print ' Rule:  older;newer =', f0o,';',f1o,
	os.system('ls -rt '+ f0o +' '+ f1o  +' > '+ tmp)
	occ = string.split(open(tmp,'rt').read())
#	print '                     ',occ[0],' is older now...',
#	print
	if(occ[0]== f1o):
		print '  ----> NO!',
		print ' goto make...'
#		os.system("rm   "+ f1o )
#		os.system("make "+ f1o )
		repeatmake=1
	else:
		print '\t--> YES!'
	

print '### end of checkmodule ###'
if(repeatmake==0): print '     OK! Right time-stamps for module dependency!'

if(repeatmake==1): print '     checkmodule found wrong order of compilation!'
if(repeatmake==1): print '     So checkmodule recompiled them!'
if(repeatmake==1): print ' ### Thus you have to repeat make! ###'
