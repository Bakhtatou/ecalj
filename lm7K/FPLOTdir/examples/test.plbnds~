#!/bin/csh -f

# This shell script tests the functioning of program plbnds

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias runrdcmd 'set retcall = \!\!:1; set rdcmdfmt = \!\!:2 ; set outfile = \!\!:3 ; set callarg = \!\!:4 ; goto runrdcmd'
alias findcmd  'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set make_path = \!\!:4 ; goto findcmd'
alias compare_res 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set refvar = \!\!:4 ; set tol = \!\!:5 ; set passvar = \!\!:6 ; goto compare_res'
alias compare_res_0 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set tol = \!\!:4 ; set passvar = \!\!:5 ; goto compare_res_0'
alias cnvt_d_fmt  'set retcall = \!\!:1; set testvar = \!\!:2 ; set testval = \!\!:3 ; goto cnvt_d_fmt'
alias query 'set retcall = \!\!:1 ; set retcall2 = \!\!:2 ; set callarg = \!\!:3 ; goto query'

set a
set slow
set testfile = $0
set testdir = $testfile:h
set etcdir  = `cd $testdir/../etc; pwd`
set topdir  = `cd $testdir/..; pwd`
set zdiff   = $etcdir/zdiff
set space = '        '
set failed = 0

# Prepend current working-directory, top-level dir and maindir to path
set path = (. $topdir $path)

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--add0":
      set ladd0
      breaksw
    case "--downfold":
      set downfold
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    case "--all":
      breaksw
    default:
      echo unrecognized switch $arg1
      echo 'usage: test.plbnds [switches] [test-list]'
      echo '       test-list is a list of test cases, e.g., run tests 1 and 2 with'
      echo '       "test.plbnds 1 2"'
      echo '       switches:'
      echo '       --no-iactive runs tests without prompting user'
      echo '       --quiet runs tests without prompting user'
      echo '       --verbose    script prints out extra information'
      exit -1
  endsw

end

set joblist = ($argv)
if ($#joblist == 0 ) set joblist = (1 2 3 4 5 6 7)

if (! $?quiet) then
  echo " "
  echo "$space test.plbnds:  tests program plbnds"
endif

echo $joblist | grep 1 >/dev/null
if ($status) goto chk1e
cat <<EOF

         --- Test 1.  Direct generation of postscript file ---
         Illustrates and checks functioning of plbnds, reading energy
         bands of Cr in 'standard format' (see bnds.cr).
         In this mode, plbnds makes a postscript file directly.

EOF
call query chk11 'run this test'
chk11:
set pass
if ($a == "s") goto chk1e

# ... Look for executables
findcmd chk11a plbnds "$path" "$topdir"
chk11a:

# ... Assign output file names
set refout=$testdir/out.bnds.cr testout=out.plbnds
set refps=$testdir/ps.cr.gz testps=ps.cr
ln -s -f $testdir/bnds.cr ./bnds.cr

cat <<END

         ... Executing the following command:
         plbnds -lbl cr <<EOF >$testout

         -.55 .45 14 15       <- sets emin emax = energy range of bands
                                 and width and height of panels (cm)
         ASA bands in Cr      <- title
         G H N P G NH P       <- Labels.  NB: G is translated into Greek
         EOF

END
plbnds -lbl cr <<END >$testout
-.55 .45 14 15
ASA bands in Cr
G H N P G NH P
END

call zdiffiles chk13 "xxx 1 $testout $refout"
chk13:

echo ' '
echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `$zdiff $testps $refps | grep -v -E '^[0-9]' | grep -v -E '^---' | wc | awk '{print $1/2}'`
 set ntot = `wc $testps | awk '{print $1}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 1 PASSED"
else
    echo "$space test 1 FAILED"
    set failed = ($failed 1)
endif
chk1e:

echo $joblist | grep 2 >/dev/null
if ($status) goto chk2e
cat <<EOF

         --- Test 2.  Use plbnds to generate an fplot command ---
         Illustrates and checks functioning of plbnds, reading energy
         bands of Cr in 'standard format' (see bnds.cr).

         In this mode, plbnds creates an fplot command suitable for
         plotting the bands (file plot.plbnds) and corresponding
         data files (files bnd*.dat)

         This test only checks that these files are are made correctly.
         To create a postscript file, after this test invoke fplot using:
           fplot -f plot.plbnds
           ghostview ps.dat
         Alternatively, invoke
           fplot -disp -f plot.plbnds

EOF
call query chk21 'run this test'
chk21:
set pass
if ($a == "s") goto chk2e

# ... Look for executables
findcmd chk21a plbnds "$path" "$topdir"
chk21a:

# ... Assign output file names
set refout=$testdir/out.bnds.cr testout=out.plbnds
set refps=$testdir/plot.plbnds testps=plot.plbnds
ln -s -f $testdir/bnds.cr ./bnds.cr

cat <<END

         ... Executing the following command:
         plbnds -lbl -fplot cr <<EOF  >$testout

         -.55 .45 14 15       <- sets emin emax = energy range of bands
                                 and width and height of panels (cm)
         ASA bands in Cr      <- title
         G H N P G NH P       <- Labels.  NB: G is translated into Greek
         EOF

END
plbnds -lbl -fplot cr <<END >$testout
-.55 .45 14 15
ASA bands in Cr
G H N P G NH P
END

call zdiffiles chk23 "xxx 1 $testout $refout"
chk23:

echo ' '
echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `$zdiff $testps $refps | grep -v -E '^[0-9]' | grep -v -E '^---' | wc | awk '{print $1/2}'`
 set ntot = `wc $testps | awk '{print $1}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif

foreach i (1 6)
set refps=$testdir/bnd$i.dat testps=bnd$i.dat
echo -n "$space ... files $testps identical to $refps? ... "
$zdiff $testps $refps >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
 echo -n 'no ... differences fewer than 1%? ...'
 set ndiff = `cmp -l $testps $refps | wc | awk '{print $1}'`
 set ntot = `wc $refps | awk '{print $3}'`
 if (`echo ' ' | awk -v ndiff=$ndiff -v ntot=$ntot '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($ndiff difference(s) of $ntot)"
 else
    echo no "($ndiff difference(s) of $ntot)"
    unset pass
  endif
endif
end

if ($?pass) then
    echo "$space test 2 PASSED"
else
    echo "$space test 2 FAILED"
    set failed = ($failed 2)
endif
chk2e:

echo ' '
if ($#failed <= 1) then
    echo "$space $testfile : all tests PASSED"
    echo " "
    exit 0
else
    shift failed
    echo "$space $testfile : These tests FAILED:" $failed
    echo " "
    exit -1
endif

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space Compare $callarg to line in file $refout":
  grep $callarg $testout
  gunzip -c $refout | grep $callarg
  goto $quitjob

# ---------------- cnvt_d_fmt --------------
# converts exponential format #.##D## or #.##d## to #.##E##
# usage: cnvt_d_fmt retcall testvar testval
exit
cnvt_d_fmt:
  set quitjob = $retcall
  set $testvar = `echo $testval | sed s/D/E/ | sed s/d/E/`
  goto $quitjob

# ---------------- zdiffiles --------------
# calling argument should consist of four strings:
# 1st string = string that terminates zdiff
# 2nd string = integer that counts how many times terminator should occur before terminating
#              -1 -> last occurence
# 3nd string = first file name
# 4th string = second file name
# example: call zdiffiles chk69 "CPU 3 $testout $refout"
exit
zdiffiles:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  set files = ($callarg)
  set endstr = $files[1]
  shift files
  set nend = $files[1]
  shift files
  if ($nend == "-1") then
    set nend = `grep "$endstr" $files[1] | wc | awk '{print $1}'`
  endif

#    echo zdifffiles : $quitjob $nend
#    grep $endstr $files[1]

  query zdiff11 $quitjob "compare these files : $files"
zdiff11:
  $zdiff $files | awk -v endstr="$endstr" -v nend=$nend -v endl=0 -v endr=0 '{if ($1 == "<" && endl < nend) print ; if ($1 == ">" && endr < nend) print ; if ($1 == ">" || $1 == "<" || endl >= nend && endr >= nend) ; else {print} ; if ($1 == "<" && $2 == endstr) {endl+=1}; if ($1 == ">" && $2 == endstr) {endr+=1};}' | head -50
  goto $quitjob

# ---------------- compare_res --------------
# Compares two numbers $testvar-$refvar and unsets $passvar if |testvar-refvar|<tol
# usage: compares_res retcall keyword testvar refvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   refvar       : second number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar-refvar|<tol
exit
compare_res:
  set quitjob=$retcall
# echo $retcall $keyword $testvar $refvar $tol $passvar
  echo -n "$space $keyword ($testvar) within tol ($tol) of reference ($refvar)? ... "
  if (`echo $testvar $refvar | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);tl=1.001*tol} print (k<=tl)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- compare_res_0 --------------
# Compares a number $testvar and unsets $passvar if |testvar|<tol
# usage: compares_res_0 retcall keyword testvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar|<tol
exit
compare_res_0:
  set quitjob=$retcall
#  echo $retcall $keyword $testvar $tol $passvar
 echo -n "$space $keyword ($testvar) smaller than tol ($tol)? ... "
  if (`echo $testvar 0 | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- runrdcmd --------------
exit
runrdcmd:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space Invoking rdcmd will execute the following job(s):"
    $rdcmd -f:$rdcmdfmt --n $callarg
    echo "$space $rdcmd '-f:rdcmd:%2f' $callarg"
                 $rdcmd '-f:rdcmd:%2f' $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      exit
#      $callarg >> $appfile
      set retval = $status
    else
      echo "$space Invoking rdcmd will execute the following job(s):"
      $rdcmd -f:$rdcmdfmt --n $callarg
      echo "$space $rdcmd '-f:#rdcmd:%2f' $callarg  >& $outfile"
                   $rdcmd '-f:rdcmd:%2f' $callarg >& $outfile
      set retval = $status
      if ($retval == 0) then
        echo "$space Job(s) completed successfully; output in $outfile"
      endif
    endif
  endif

  if ($retval == 0) then
    if ($?ladd0) then
      echo -n "         ..." ; $testdir/add0 $testout
    endif
    goto $quitjob
  else
    echo "$space ...oops... the following command returned with nonzero exit status:"
    echo -n "$space   "
    grep $rdcmd: $outfile | tail -1 | sed 's/rdcmd:  //'
    goto cleanup
  endif

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... executable $prog_cmd not found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space *hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  goto $retcall

# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space"'*'"job $callarg[1] returned with error status $retval"
  if ($retval != 0) echo "$space unacceptable error status ... $testfile aborting"
  exit $retval
