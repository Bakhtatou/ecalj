c      logical function stabilize_zhev()
c      stabilize_zhev=.true.
c      print *,' stabilize_zhev=',stabilize_zhev
c      end

      logical function mixrealsmooth()
      mixrealsmooth=.true.
! Takao think mixrho should give a correct guess from informations
! of |rho_in - f(rho_in)|**2
! In our procedure now, takao think the weight from smooth part is rather small.
! Thus our mixing procedure is mainly controlled by atoic part.
! This works OK but may be not best...
!   How to choose wgtsmooth? or it will be better to take correct weighting for
!   mixing.
      print *,'mixrealsmooth=',mixrealsmooth
      end

      logical function noelind()
      noelind=.true. !in mixrho.F. If T, ELIND procedure is not.
! Does elind really works fine? Probably, we first have to modify mixrho.
      end

      logical function enforce_positive_smrho()
!      enforce smrho to positive in mkpot.F
      enforce_positive_smrho=.true.
c      enforce_positive_smrho=.false.
      end

c-----------
Cr   To get old result, Use 1. below.
Cr   1. newsigmasw=F and pmtsig=F : gives old result   (backword compatibility mode)
Cr
Cr   2. newsigmasw=F and pmtsig=T : new result               (test mode)
Cr   3. newsigmasw=T (then pmtsig is irrelevant): new result (run mode)
Cr
Cr Note: you also need to use sigswitch=0 if you want to reproduce old results.

      logical function newsigmasw()
c newsigmasw:
c        T: newsigma rotation, and interpolation.
c        O: old version
c      newsigmasw=.true.
      newsigmasw=.false.
      end

      logical function pmtsig()
Cr This switch is effective only when newsigmasw=F.
Cr This is used in hambls.F.
c      pmtsig=.true. !new interpolation mode.
      pmtsig=.false. !old result
      end
c-----------
      integer function debugmode()
      debugmode=0
      end

c
      integer function sigswitch()
c sigma interpolation
Cr This switch is effective only when newsigmasw=F.
Cr This is used in hambls.F.
c
c new interpolation mode for self-energy: Neglect asig and bsig
c sigswitch=0: old version
c sigswitch=1: new version of sigma interpolation. Readin ESEAVR
c      sigswitch=0
      sigswitch=1
      end

      logical function fullmesh()
c      fullmesh=.true.
      fullmesh=.false.
      end

c      logical function nomshsiz()
c      nomshsiz=.true.
c      end

      logical function noshorbz()
      noshorbz=.false.
      end

      integer function matmul_pwhovl()
c switch used in gwd/pwmat.F
c  matmul_pwhovl=1 uses matmul,
c  matmul_pwhovl=2 and matmul_pwhovl=3 uses BLAS. In cases, it fails in centos(gfortran and so) in core-i7.
      matmul_pwhovl=2
      end
