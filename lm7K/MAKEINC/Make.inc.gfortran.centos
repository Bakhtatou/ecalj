######################################################
#
# $lmdir, which is defined in Makefile in ./ and in other 
# directories, should point at this root directory.
#
######################################################
############# Libraries BLAS LAPACK FFTW 

### kino's case
LIB1= -L$(HOME)/kit/fftw/fftw-3.1.2/.libs/ -lfftw3 \
 $(HOME)/kit/numericallib/LAPACK/lapack_core2gfortran.a \
 $(HOME)/kit/numericallib/LAPACK/blas_core2gfortran.a \
 $(HOME)/kit/numericallib/LAPACK/tmglib_core2gfortran.a \

#LIBLOC= /opt/acml4.2.0/ifort64_mp/lib/libacml_mp.a -lfftw3 -lguide 
#LIBLOC= -static -lmkl_lapack64 -lmkl_em64t -lguide -lfftw3
#  I had a problem in zgemm in pwmat for 4.2.0. Wrong normchk.dia
#LIBLOC= /opt/acml4.2.0/gfortran64/lib/libacml.a -lfftw3
#  I had a problem in zgemm in pwmat. Wrong normchk.dia
#LIBLOC= /opt/acml4.1.0/gfortran64/lib/libacml.a -lfftw3

# ubuntu 9.10 apt-get install
LIB2= /usr/lib64/libfftw3.a /usr/lib64/liblapack.so.3gf /usr/lib64/libblas.a 

# centos yum install. Zgemm did not work for larger size of matrix.
#LIB3= -L/usr/lib64/atlas/ /usr/lib64/atlas/liblapack.so.3 \
        /usr/lib64/atlas/libf77blas.so.3 /usr/lib64/atlas/libcblas.so.3 \
        /usr/lib64/atlas/libatlas.so.3 -lfftw3

#LIBLOC= -lfftw3 /opt/acml4.4.0/ifort64/lib/libacml.a
#LIBLOC=$(LIB2)

# centos yum install blas, yum install lapack
LIBLOC= -lfftw3 /usr/lib64/liblapack.so.3.0.3 /usr/lib64/libblas.so.3.0.3

############ Fortran compiler
#FC = mpif90
#LK = mpif90
FC = f95
LK = f95
############# where is modules?
moddir = MODDIR/$(obj_path)
module = -J$(moddir) -I$(moddir)
############# Fortran compiler switch
FFLAGS = -O3  -fomit-frame-pointer -funroll-loops  -ffast-math -ffixed-line-length-132 $(CPP_SW) $(module)
FFLAGS_LESS = -O2 -fomit-frame-pointer $(CPP_SW) -ffixed-line-length-132 $(module)
FFLAGS_LESS2 = -O1 -fomit-frame-pointer $(CPP_SW) -ffixed-line-length-132 $(module)
FFLAGS_LESS3 = -O0 -fomit-frame-pointer $(CPP_SW) -ffixed-line-length-132 $(module)
FFLAGS_NONE = -g  -ffixed-line-length-132 $(CPP_SW) $(module)
FFLAGS_LESS67 = -O0 -fomit-frame-pointer $(CPP_SW) -ffixed-line-length-132
#FFLAGS = -O3  -fomit-frame-pointer -funroll-loops  -ffast-math  $(CPP_SW) $(module)
#FFLAGS_LESS = -O2 -fomit-frame-pointer $(CPP_SW) $(module)
#FFLAGS_LESS2 = -O1 -fomit-frame-pointer $(CPP_SW) $(module)
#FFLAGS_LESS3 = -O0 -fomit-frame-pointer $(CPP_SW) $(module)
#FFLAGS_NONE = -g  $(CPP_SW) $(module)
#
# safer option (debug)
#FFLAGS =      -g  $(CPP_SW) $(module)
#FFLAGS_LESS = -g  $(CPP_SW) $(module)
#FFLAGS_LESS2 = -g  $(CPP_SW) $(module)
#FFLAGS_LESS3 = -g  $(CPP_SW) $(module)
#FFLAGS_NONE = -g  $(CPP_SW) $(module)
############# CPP switch 
CPP_SW = -DHASIARGC  -DHASGETARG  -DFDATE  -DHASCPUTIME  -DHASGETENVIRONMENTVARIABLE  -DNOQUAD  -DNOT_OVERLAP_VAR
#
#MPI  case add  -UMPE -UMPIK -DMPI 
#
##MPIK case k-point parallelizaion in MPI add -UMPE -DMPIK -UMPI 
##### Patch section #######################################3
### ... patch section for ./slatsm/slatsm.a
$(sla_obj_path)/huntx.o:slatsm/huntx.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/hunti.o: slatsm/hunti.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/polcof.o: slatsm/polcof.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/rdfiln.o: slatsm/rdfiln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
##### patch section for ./subs/subs.a
$(subs_obj_path)/ropbes.o: subs/ropbes.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/ropyln.o: subs/ropyln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/spcgrp.o: subs/spcgrp.F
	$(FC) $(FFLAGS_LESS) -c $< -o $@
### these modules requies no optimization ---> safer.
#$(subs_obj_path)/m_toksw.o $(moddir)/m_toksw.mod $(moddir)/m_gtv.mod  : subs/m_toksw.F 
#$(subs_obj_path)/m_rdctrl.o $(moddir)/m_rdctrl.mod  : subs/m_rdctrl.F $(moddir)/m_gtv.mod $(moddir)/m_struc_def.mod $(moddir)/m_toksw.mod 
#$(subs_obj_path)/m_rdctrlchk.o $(moddir)/m_rdctrlchk.mod  : subs/m_rdctrlchk.F $(moddir)/m_gtv.mod $(moddir)/m_toksw.mod 
#$(subs_obj_path)/m_struc_def.o $(moddir)/m_struc_def.mod  : subs/m_struc_def.F 
#$(subs_obj_path)/m_struc_func.o $(moddir)/m_struc_func.mod  : subs/m_struc_func.F 
 
$(subs_obj_path)/m_toksw.o $(moddir)/m_toksw.mod  : subs/m_toksw.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_toksw.o
$(subs_obj_path)/m_rdctrl.o $(moddir)/m_rdctrl.mod  : subs/m_rdctrl.F $(moddir)/m_gtv.mod $(moddir)/m_struc_def.mod $(moddir)/m_toksw.mod 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrl.o 
$(subs_obj_path)/m_rdctrlchk.o : subs/m_rdctrlchk.F $(subs_obj_path)/m_gtv.o $(subs_obj_path)/m_toksw.o 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrlchk.o
$(subs_obj_path)/m_struc_def.o $(moddir)/m_struc_def.mod $(moddir)/m_struc_func.mod  : subs/m_struc_def.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_struc_def.o
$(subs_obj_path)/m_struc_func.o : subs/m_struc_func.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_struc_func.o
$(fp_obj_path)/rhogkl.o  : fp/rhogkl.F $(moddir)/m_struc_def.mod 
	$(FC) $(FFLAGS_LESS) -c $< -o $@
############# archiver
AR := ar
ARFLAGS := rv
RANLIB := ranlib
############# program and libraries (choose one of sections; normal, MPI, or MPIK)
programs = lmf lmfa lmfgw lmdos lmchk lmf2gw rdcmd lm67
SUBS   := libsubs.a
FP     := libfp.a
GWD    := libgwd.a
SLATSM := slatsm.a
#NC     = libnc.a
#TB     = libtb.a
#
### MPI case #####
#programs = lmf-MPI lmfgw-MPI
#SUBS   = libsubs-MPI.a
#FP     = libfp-MPI.a
#GWD    = libgwd-MPI.a
#SLATSM = slatsm-MPI.a
#
##### MPIK case ##
#programs = lmf-MPIK lmfgw-MPIK
#SUBS   = libsubs-MPIK.a 
#FP     = libfp-MPIK.a
#GWD    = libgwd-MPIK.a
#SLATSM = slatsm-MPI.a  #slatsm-MPI = slatsm-MPIK
### path to libraries (fixed) #########
LIBSUBS := subs/$(SUBS)
LIBFP   := fp/$(FP)
LIBGWD  := gwd/$(GWD)
LIBSLA  := slatsm/$(SLATSM)
#LIBNC   = nc/$(NC)
#LIBTB   = tb/$(TB)
#LIBES := $(LIBSLA) $(LIBLOC)
############# targets of libs
# $(LIBSUBS): $(subs_obj)   fails
#	$(AR) $(ARFLAGS) $@ $(subs_obj)
#
subs/$(SUBS):$(subs_obj)
	$(AR) $(ARFLAGS) $@ $(subs_obj)
fp/$(FP): $(fp_obj)
	$(AR) $(ARFLAGS) $@ $(fp_obj)
slatsm/$(SLATSM): $(sla_obj)
	$(AR) $(ARFLAGS) $@ $(sla_obj)
gwd/$(GWD): $(gwd_obj)
	$(AR) $(ARFLAGS) $@ $(gwd_obj)

