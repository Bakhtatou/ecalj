==================================================================
Our home page is at http://pmt.sakura.ne.jp/wiki/,
(not so much documents in English yet). not well-organized yet...
===================================================================

=== ecalj package ===
(this document is checked at Jan2013)
https://github.com/tkotani/ecalj

ecalj is a firts-principle electronic structure calculation package in f90.
Version ctrl by git. In cases, we use python.

(1)All electron full-potential PMT method (LAPW+LMTO)
   Related source codes are in ecalj/lm7K/ 
   ctrlgen2.py can set up 'standard input file(ctrl file)' just from
   the given crystal structure file (ctrls file). 
   A converter between POSCAR(VASP) and ctrls file will be included in
   ecalj soon.

(2)GW method, especially, PMT-SQGW method
   Quasiparticle self-consistent GW method (QSGW),
   dielectric functions, spin fluctions.
   GW-related codes are in ecalj/fpgw/
   
   Recently, I renewed some part of algolism of GW/QSGW calculations
   (some ideas are taken from from PRB.81,125102(2010) and Copmuter Physics Comm. 176(2007)1-13).
   ---> this is better than old versions; speed, memory (file size),
   and accuracy for anisortopic systems.
   For comparison, you can use old version in .git (gitk --all and check it out).

(3) We use lmf-MPIK and mpi version of hvccfp0,hx0fp0_sc,hsfp0_sc,
   although we have room to improve it.


Usage minimum. (e.g, PMT-QSGW(gwsc) for si)
-------------------------------------------
(1) Write structure file ctrls.si by hand 
    (you can use our converter between POSCAR(VASP) and ctrls).
(2) convert ctrls.si to ctrl.si by ctrlgen2.py si --eh1 --nk=6 --tratio=1.0 
   (do -help). --eh1 is required for PMT-QSGW. Then you have default
   ctrl.si (rename ctrlgen2.ctr.si to ctrl.si). 
   Modify it if reqiured. We don't need empty sphere
   now. pwemax specify number of APW. It is recommended to know
   meanings of parameters in the generated ctrl.si. 
   You may need to modify ctrl.si, especially for magnetic cases.
   For examle, you need to set MMOM for nspin=2 
   (initial condition of magnetic moment distribution).
(3) Run "lmfa si" to prepare atom.
(4) For PMT-QSGW, make GWinput.tmp by mkGWIN_v2 si 
    (just put BZ division n1 n2 n3). Edit GWinput.tmp and rename it as GWinput.
(5) Then run a script gwsc, e.g. "gwsc 5 si -np 5" (5+1 iteration with
    6 nodes).
(6) To reproduce final results of gwsc, run lmf si with ctrl.si rst.si QGpsi ESEAVR sigm.si.
-------------------------------------------


NOTE:
*PMT-QSGW looks OK. Although defaults parameters can
give reasonable results generally, you may need to check 
convergence carefully by changing parameters 
(use --eh1 option when we invoke ctrlgen2.py).
*We still have a room to make interpolation of sigma 
(This problem is carried from LMTO-QSGW).
Need further bug check and make it robust more...


################## Install and test of lm7K ########################
*Installation for lm7K

---Let us assume you use ubuntu. ---
>sudo apt-get install git  #version control and to get source from github)
>sudo apt-get install gitk #git gui 'gitk --all' is useful. do it at ecal/.
>sudo apt-get install gfortran      # GFORTRAN
>sudo apt-get install openmpi-bin openmpi-dev     # MPI 
>sudo apt-get install libfftw3-3     or something else # FFTW
>sudo apt-get install libblas3gf     or something else # BLAS
>sudo apt-get install liblapack3gf   or something else  # LAPACK

python 2.x is also assumed (usually already in ubuntu).

>git clone https://github.com/tkotani/ecalj.git # Get source code for ecalj.

Check PLATFORM=foobar at the head of ecalj/lm7K/Makefile.
ecalj/lm7K/MAKEINC/Make.ing.gfortran is used when you choose
PLATFORM=gfortran. (Commnet out this line in Makefile, or do "make PLATFORM=gfortran".)
Set LIBLOC in Make.inc.gfortran when you use different math libraries.

You may also have to modify compile options
and so on (but usually, only modify math library LIBLOC)
in lm7K/MAKEINC/Make.inc.gfortran. 

Current ecalj with gfortran4.6 or 4.7 works fine with FFLAGS=-O2,
but not with failed with FFLAGS=-O3.

Parallel make as
prompt>make -j4 PLATFORM=gfortran
may speed it up for multicore machines. But in cases it stops because
of dependency is not well-described in Makefile. 
In such case, repeat it a few times, or repeat it without -j4.
and then
prompt>make PLATFORM=gfortran install
. This just copy required files to your ~/bin.
Messages ": warning: ignoring old commands for target `/vxcnls.o'" is
just because of problem of Makefile. you can neglect this.

lmf-MPI is now needed for gwsc. to make it with
propmt>make PLATFORM=gfortran_mpik
lmf-MPIK is also generated, but it do not work now (9thjan2013. need to fix it)

For ifort, set PLATFORM=ifort, and PLATFORM=ifort_mpik. 
Then ecalj/lm7K/MAKEINC/Make.inc.ifort is used --- you need to set math libraries in it.

You can make both binaries with gfortran and with ifort at lm7K. 
Then you have to do "make clean" at ecalj/lm7K, before you make
binaries. (e.g You first make binaries with gfortan. Then move binaries to
your another directories, then do make clean, and set PLATFORM=ifort,
and so on to make nbinaries by ifort.)

---
*Test for lm7K
>make check
at ecalj/lm7K. It may take five minutes or so. 
If you see "All test passed" finally, your installation is OK.

>make install
at ecalj/lm7K just moves all requied binaries to your ~bin.



################## Install and test for fpgw ####################### 
*Installation for fpgw/
At fpgw/exec/ directory, you have to edit make.inc.
Especially note option, -heap-arrays for ifort
(to avoid Segmentation fault due to stacksize limit (ulimit -a), it is
required. Or you can set ulimit -s unimited).
 
Then you have to run 
>make
>make install
>make install2
Before this, you have to set blas and lapack in fpge/exec/make.inc.
make install copy requied files to your ~/bin.

-------------
*Installation test for fpgw/

At fpgw/exec/
>make check
(this is equivalent to cd ../TESTinstallGW;./testgw.py --enforce --all) 

It makes temp_* directories under fpgw/TESTinstallGW/.
At the directory, 
>./testgw.py --help
shows help for the test controller testgw.py

All tests will require ~10min.  (nio_gwsc takes ~300sec)

---------------------------
* Other points
>make cleanall 
This removes all *.o *.a and binaries except original source.
