#!/bin/tcsh
# Shell script for GW calculation.
# Total energy mode also requires script extract_elda_from_log_file
# Required inputs are:
#  ctrl.ext rst.ext used or created by lmf
#  GWinput
#  ... or
#  GWIN0 GWIN_V2 QPNT which you can create using lmfgw, job -1.
#                     NB: you should edit these files.
#  If the --sc switch is used, QPNT is not needed.
#
#  Invoke with --ht for Faleev's mode generating real weights from Hilbert transform
#  Invoke with --sc for Faleev's self-consistent mode
#  Invoke with --scrho to make density self-consistent before GW pass
#
#  Updates
#    28 Mar 04  Added --multitet switch
#---------------------------------------------
set lmgw = $HOME/bin
set lmgw = $0:h
#set nfpgw = /export/home/users/tnkotan/bin
set nfpgw = $lmgw
set noexec = 0
set nocc = 0
set varlst
set retzero
set lmf = lmf
set lmfgw = lmfgw
unlimit
alias findcmd  'set retcall = \!\!:1 ; set prognam = \!\!:2 ; set prog_cmd = \!\!:3 ; set path_name = \!\!:4 ; set make_path = \!\!:5 ; goto findcmd'
set space = '        '

while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")
  set arg1 = $1; shift

  switch ($arg1)
    case "--metal":
      set metal
      breaksw

    case "--etot":
      set etot
      breaksw

    case "--insul=*":
      set nocc=`echo $arg1 | sed s/--insul=//`
      set insul=`echo $arg1 | sed s/--insul=//`
      breaksw

    case "--getsigp":
      set getesig = 1
      set getnk = 1
      if (! $?getmtet) then
        set getmtet = 0
      endif
      breaksw

    case "--getesig":
      set getesig = 1
      breaksw

    case "--getnk":
      set getnk = 1
      breaksw

    case "--multitet=no":
      set getmtet = 0
      breaksw

    case "--multitet":
      set getmtet = 1
      breaksw

    case "--noexec":
      set noexec = 1
      breaksw

    case "--extest":
      set extest = 1
      breaksw

    case "--nfp":
      set nfpjob
      breaksw

    case "--ht":
      set htransform
      breaksw

    case "--scrho":
      set scrho
      breaksw

    case "--sc":
      set sc
      breaksw

    case "--big":
      set lmf = lmf-big
      set lmfgw = lmfgw-big
      breaksw

    case "--eps":
      set eps
      breaksw

    case "--epsNLF":
      set epsNLF
      breaksw

    case "--bin=*":
    case "-bin=*":
      set lmgw=`echo $arg1 | sed s/--bin=// | sed s/-bin=//`
      set nfpgw=$lmgw
      breaksw

    case "--lmbin=*":
    case "-lmbin=*":
      set lmgw=`echo $arg1 | sed s/--lmbin=// | sed s/-lmbin=//`
      breaksw

    case "--gwbin=*":
    case "-gwbin=*":
      set nfpgw=`echo $arg1 | sed s/--gwbin=// | sed s/-gwbin=//`
      breaksw

    case "--noclean":
      set noclean
      breaksw

    case "--band*":
      set bnds=$arg1
      breaksw

#      case "--hsfp0:*":
#        set hsfp0=`echo $arg1 | sed s/--hsfp0:// | sed s/-hsfp0://`
#        breaksw

#      case "--hsfp0":
#        set hsfp0
#        breaksw

    case "-v*=*":
      set varlst=($varlst $arg1)
      breaksw

    case "--help":
    case "--h":
      goto usage

    default:
      echo unrecognized switch $arg1
      goto usage
  endsw
end

# check for existence of executables
if (! -x $lmgw/$lmf || ! -x $lmgw/$lmfgw || ! -x $lmgw/lmf2gw) then
  echo "lmgw (abort) one or more of the following is missing from $lmgw, or is not executable:"
  echo "  $lmf $lmfgw lmf2gw"
  exit -1
endif

pushd $nfpgw >& /dev/null
if (! -x hbasfp0 || ! -x hvccfp0 || ! -x hx0fp0 || ! -x hsfp0 || ! -x hqpe || ! -x hchknw || ! -x qg4gw || ! -x heftet || ! -x rdata4gw_v2 || ! -x hx0fp0_sc || ! -x hsfp0_sc || ! -x hqpe_sc) then
  echo "lmgw (abort) one or more of the following is missing from $nfpgw, or is not executable:"
  echo "  hbasfp0 hvccfp0 hx0fp0 hsfp0 hqpe hchknw qg4gw heftet rdata4gw_v2 hx0fp0_sc hsfp0_sc hqpe_sc"
  exit -1
endif
popd >& /dev/null

if ($?sc && $?eps) then
  echo "    lmgw: oops! incompatible switches --sc and --eps ... aborting "
  exit -1
endif
if ($?sc && $?etot) then
  echo "    lmgw: oops! incompatible switches --sc and --etot ... aborting "
  exit -1
endif
if ($?eps && $?etot) then
  echo "    lmgw: oops! incompatible switches --eps and --etot ... aborting "
  exit -1
endif
if ($?sc && $?epsNLF) then
  echo "    lmgw: oops! incompatible switches --sc and --epsNLF ... aborting "
  exit -1
endif
if ($?eps && $?epsNLF) then
  echo "    lmgw: oops! choose only one of --eps and --epsNLF ... aborting "
  exit -1
endif
if ($?eps || $?epsNLF) then
  if (! -e EPScond) then
    echo "    lmgw: oops! dielectric function selected but file EPScond is missing"
    echo "          File EPScond has one line with two numbers, e.g. 1.0 0.05"
    echo "          First number specifies upper end of range---[0,1] in this case"
    echo "                and is in Hartree units!"
    echo "          Second number specifies mesh and is in Rydberg units!"
    echo "    lmgw aborting ..."
    exit -1
  endif
endif

#  if ($?hsfp0) then
#    if ( "$hsfp0" != "" ) then
#      if ($noexec == 0 && GWinput) then
#        echo "lmgw: Changing esigcut in GWIN0 to $hsfp0"
#        echo not ready
#        exit -1
#      else if ($noexec == 0) then
#        echo "lmgw: Changing esigcut in GWIN0 to $hsfp0"
#        cp GWIN0 GWIN0~
#        awk -vesig=$hsfp0 '{i+=1 ; if (i == 9) {print " 9999 ",esig,"         Energy cutoff for hsfp0"} else {print}}' GWIN0~ >GWIN0
#        echo diff GWIN0 GWIN0~
#        diff GWIN0 GWIN0~
#      endif
#    endif
#  goto hsfp0entry
#  endif

if ($#argv != 1) goto usage
# echo "    lmgw :" ctrl file extension = $argv[1]
setenv LMJOB $argv[1]
if (! -e ctrl.$argv[1]) then
  echo "missing file ctrl.$argv[1]"
  shift
  goto usage
endif
set gwargs = ($varlst $LMJOB)
if (-e switches-for-lm) then
  set gwargs = "$varlst `head -1 switches-for-lm` $LMJOB"
endif

# --- Some checks on the structure of GWIN0 ---
if (! -e GWinput) then
if (`wc GWIN0 | awk '{print $1}'` != 9) then
   if ($?sc) then
     echo '    lmgw (abort) ... expected GWIN0 has' `wc GWIN0 | awk '{print $1}'` when 9 are expected
     exit -1
   endif
  echo   '    lmgw (warning) ... expected GWIN0 has' `wc GWIN0 | awk '{print $1}'` when 9 are expected
endif
if (`head -2 GWIN0 | tail -1 | awk '{print NF}'` < 3) then
  echo '    lmgw (abort) ... 2nd line of file GWIN0 has' `head -2 GWIN0 | tail -1 | awk '{print NF}'` arguments when 3 are expected
  exit -1
endif
if (`head -4 GWIN0 | tail -1 | awk '{print NF}'` < 2) then
  echo '    lmgw (abort) ... line 4 of file GWIN0 has' `head -4 GWIN0 | tail -1 | awk '{print NF}'` arguments when 2 are expected
  exit -1
endif
if ($?sc) then
if (`head -8 GWIN0 | tail -1 | awk '{print NF}'` < 2) then
  echo '    lmgw (abort) ... line 8 of file GWIN0 has' `head -8 GWIN0 | tail -1 | awk '{print NF}'` arguments when 2 are expected
  exit -1
endif
if (`head -9 GWIN0 | tail -1 | awk '{print NF}'` < 2) then
  echo '    lmgw (abort) ... line 9 of file GWIN0 has' `head -9 GWIN0 | tail -1 | awk '{print NF}'` arguments when 2 are expected
  exit -1
endif
endif
endif

# --- Extract appropriate energy cutoff for hsfp0 (alters GWinput or GWIN0) ---
if ($?getesig && $?scrho) then
  echo -n "    lmgw : extracting SIGP:emax ... "
  if ($noexec == 0) then
    $lmgw/$lmf --show --quit=show --no-iactive $gwargs | grep SIGP: | tail -1 | awk '{match($0,"emax=\([^ ]\)*"); print substr($0,RSTART+5,RLENGTH-5)}' >/dev/null
    if ($status) then
      echo "    lmgw: oops! $lmgw/$lmf returned with nonzero exit status ... aborting "
      exit -1
    endif
    set emax = `$lmgw/$lmf --show --quit=show --no-iactive $gwargs | grep SIGP: | tail -1 | awk '{match($0,"emax=\([^ ]\)*"); print substr($0,RSTART+5,RLENGTH-5)}'`
    set emaxs = `awk -vemax=$emax 'BEGIN {print emax+.5}'`
    echo found emax = $emax ... use emaxs = $emaxs
    if (-e GWinput) then
      echo "           copying file GWinput to GWinput~"
      cp GWinput GWinput~
      set src = GWinput~
      set dest = GWinput
      echo "           writing file $dest created from $src, changing ESIGCUT line to $emaxs"
      awk -v "emaxs=$emaxs" '{if ($1 == "emax_sigm") {print "emax_sigm", emaxs,"  ! Energy cutoff for Sigma, Ry (Optional)"} else {print}}' $src >$dest
    else
      echo "           copying file GWIN0 to GWIN0~"
      cp GWIN0 GWIN0~
      set src = GWIN0~
      set dest = GWIN0
      echo "           writing file $dest created from $src, changing ESIGCUT line to $emaxs"
      awk -v "emaxs=$emaxs" '{i+=1; if (i == 9) {print " 9999 ", emaxs,"           Energy cutoff for hsfp0"} else {print}}' $src >$dest
    endif
  else
     echo "nothing extracted (noexec)"
  endif
endif

# --- Turn on or off multitet (alters GWinput) ---
if ($?getmtet && $?scrho) then
  if ($getmtet == 0) then
     echo -n "    lmgw : removing multitet ... "
     cat GWinput | sed 's/^ *multitet/! multitet/' >GWinput~
  else
     echo -n "    lmgw : adding multitet ... "
     cat GWinput | sed 's/^! *multitet/multitet/' >GWinput~
  endif

  cmp GWinput GWinput~ >/dev/null
  if ($status == 0) then
    echo "nothing to change"
  else if ($noexec) then
    echo "nothing altered (noexec)"
  else
    echo file changed.
#      diff GWinput GWinput~
    mv GWinput~ GWinput
  endif
endif

# --- Extract number of k divisions (alters GWinput or GWIN0) ---
if ($?getnk && $?scrho) then
  echo "    lmgw : extracting NKABC= ... "
  echo 'set nkabc = (`'"$lmgw/$lmfgw --show --quit=show --no-iactive $gwargs | grep NKABC | tail -1 | sed s/NKABC=//"'`)'
  if ($noexec == 0) then

    $lmgw/$lmfgw --show --quit=show --no-iactive $gwargs >/dev/null
    if ($status) then
      echo "    lmgw: oops! $lmgw/$lmf returned with nonzero exit status ... aborting "
      exit -1
    endif
    set nkabc = (`$lmgw/$lmfgw --show --quit=show --no-iactive $gwargs | grep NKABC | tail -1 | sed s/NKABC=//`)
    echo "$nkabc"
    if (-e GWinput) then
      echo "           copying file GWinput to GWinput~"
      cp GWinput GWinput~
      set src = GWinput~
      set dest = GWinput
      echo "           writing file $dest created from $src, changing n1n2n3 line to `echo $nkabc | sed 's/ /  /g'`"
      awk -v "nkabc= `echo $nkabc | sed 's/ /  /g'`"  '{if ($1 == "n1n2n3") {printf "n1n2n3 %s ! for GW BZ mesh\n", nkabc} else {print}}' $src >$dest
    else
      echo "           copying file GWIN0 to GWIN0~"
      cp GWIN0 GWIN0~
      set src = GWIN0~
      set dest = GWIN0
      awk -v "nkabc= `echo $nkabc | sed 's/ /  /g'`" '{i+=1; if (i == 2) {printf " %s\n", nkabc} else {print}}' $src >$dest
    endif
  else
     echo "nothing extracted (noexec)"
  endif
endif

# --- Self-consistency in the density ---
if ($?scrho) then
  echo "           rm -f mixm.$argv[1]"
                   rm -f mixm.$argv[1]
  echo "    lmgw : invoking         $lmgw/$lmf --no-iactive $gwargs > llmf"
  if ($noexec == 0) then
    $lmgw/$lmf --showp --no-iactive $gwargs >ctrl.preprocessed.$argv[1]
    $lmgw/$lmf --no-iactive $gwargs > llmf
    if ($status) then
      echo "    lmgw: oops! $lmgw/$lmf returned with nonzero exit status ... aborting "
      exit -1
    endif
  endif
endif

# --- GW setup ---
if ($noexec == 0) rm -f NoCore QPU QPD
echo "    lmgw : invoking echo 0 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw00"
if ($noexec == 0) then
  $lmgw/$lmfgw --showp --no-iactive $gwargs >ctrl.preprocessed.$argv[1]
  echo 0 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw00
endif

# ... this branch runs qg4gw
if ($?bnds && ! $?sc) then

  echo "    lmgw : setup for band mode 1-shot GW"
  echo "    lmgw : invoking echo 3 | $nfpgw/qg4gw > lqg4gw"
  if ($noexec == 0) then
    echo 3 |$nfpgw/qg4gw > lqg4gw
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

else

  echo "    lmgw : invoking echo 1 |$nfpgw/qg4gw > lqg4gw"
  if ($noexec == 0) then
    echo 1 |$nfpgw/qg4gw > lqg4gw
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

endif

# --- eigenvalues for micro-tetrahedron method ---
if(-e Qmtet || $noexec) then
  echo mv Qmtet Qeigval
  echo "    lmgw : invoking echo 5 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw_eigval"
  echo mv eigval eigmtet
  if ($noexec == 0) then
    mv Qmtet Qeigval
    echo 5 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw_eigval
    mv eigval eigmtet
  endif
endif

# --- Add extra QP for dielectric function calculation ---
if ($?eps || $?epsNLF) then
  cp Q0P Q0P0
  gawk '{if (NF==1) {print $1 + 1 ;} else{print $0;}}' Q0P0 >Q0P
  echo ' 0d0 0.025d0 0d0 0d0 ' >> Q0P
  echo 2|$nfpgw/qg4gw  >lqg4gw02
endif

# ... this branch runs lmfgw for evals, evecs
if ($?bnds && ! $?sc) then

  echo "    lmgw : invoking   echo 4 | $lmgw/$lmfgw --no-iactive $gwargs > llmfgw04"
  if ($noexec == 0) then
    echo 4 | $lmgw/$lmfgw --no-iactive $gwargs > llmfgw04
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

  echo "    lmgw : creating bands from LBAND.UP, LBAND.DN"
  foreach ext (UP DN)
  if(-e LBAND.$ext) then
    echo "    lmgw : cp LBAND.$ext LBAND"
    echo "    lmgw : cp TOTE2.$ext TOTE2"
    echo "    lmgw : invoking   $nfpgw/hbndout  >lbndout.$ext"
    echo "    lmgw : invoking   $nfpgw/bandplot"
    echo "    lmgw : copy files BandLDA BandQP1 BandQP2 BandGWpoint BandQpoint to .$ext"
    if ($noexec == 0) then
      cp LBAND.$ext LBAND
      if(-e TOTE2.$ext) cp TOTE2.$ext TOTE2
      $nfpgw/hbndout  >lbndout.$ext
      $nfpgw/bandplot
      foreach fin (BandLDA BandQP1 BandQP2 BandGWpoint BandQpoint)
        if(-e $fin ) mv $fin $fin.$ext
      end
      foreach fout (BandLDA BandQP1 BandQP2)
        if(-e $fout.ps) mv $fout.ps $fout.$ext.ps
      end
    endif
  endif
  end
  if(-e LBAND) rm LBAND
  if(-e TOTE2) rm TOTE2
  exit

else

  echo "    lmgw : invoking echo 1 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw01"
  if ($noexec == 0) then
    echo 1 |$lmgw/$lmfgw --no-iactive $gwargs > llmfgw01
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

endif

if ($?sc) then
  echo "           rm -f v_xc evec"
                   rm -f v_xc evec
  echo "           ln -s vxc.$argv[1] v_xc"
                   ln -s vxc.$argv[1] v_xc
  echo "           ln -s evec.$argv[1] evec"
                   ln -s evec.$argv[1] evec
  echo "           ln -s evec.$argv[1] evec0"
                   ln -s evec.$argv[1] evec0
endif

if ($noexec == 0) then
  @ exinfo = `tail llmfgw01 | grep Exit | head -1 | awk '{print $2}'`
  if($exinfo == 0 ) then
    echo " OK! lmfgw mode=1 "
  else
    echo `tail -3 llmfgw01 `
  endif
endif

echo "    lmgw : invoking echo $LMJOB|$lmgw/lmf2gw"
if ($noexec == 0) then
  echo $LMJOB | $lmgw/lmf2gw >llmf2gw
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif

echo "    lmgw : invoking        $nfpgw/rdata4gw_v2"
if ($noexec == 0) then
  $nfpgw/rdata4gw_v2      >lrdata4gw
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif

#--- get EFERMI ---
echo "    lmgw : invoking echo 1|$nfpgw/heftet   >leftet"
if ($noexec == 0) then
  echo 1|$nfpgw/heftet   >leftet
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif

# ------------- Dielectric function calculation ----------------
if ($?eps) then
  echo "    lmgw : invoking echo 0|$nfpgw/hbasfp0 >lbas"
  if ($noexec == 0) then
    echo 0|$nfpgw/hbasfp0 >lbas
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
# ... Coulomb matrix
  echo "    lmgw : invoking echo 0|$nfpgw/hvccfp0 >lvccC"
  if ($noexec == 0) then
    echo 0|$nfpgw/hvccfp0 >lvccC
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
# ... Dielectric function, including local fields
  echo "    lmgw : invoking echo 3|$nfpgw/hx0fp0 >lx0"
  if ($noexec == 0) then
    echo 3|$nfpgw/hx0fp0 >lx0
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

# finished
  exit
endif

if ($?epsNLF) then
  echo "    lmgw : invoking echo 4|$nfpgw/hbasfp0 >lbas"
  if ($noexec == 0) then
    echo 4|$nfpgw/hbasfp0 >lbas
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
# ... Coulomb matrix
  echo "    lmgw : invoking echo 0|$nfpgw/hvccfp0 >lvccC"
  if ($noexec == 0) then
    echo 0|$nfpgw/hvccfp0 >lvccC
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
# ... Dielectric function, no local fields
  echo "    lmgw : invoking echo 2|$nfpgw/hx0fp0 >lx0"
  if ($noexec == 0) then
    echo 2|$nfpgw/hx0fp0 >lx0
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

# finished
  exit
endif


# ----------------------------- Start of GW pass -----------------------------

#--- hchknw only calculates NW, which contains the number of nw corresponding to QPNT ---
rm -f NW

if ($?etot) then
    echo "    echo 0 >NW"
  if ($noexec == 0) then
    echo 0 >NW
  endif
else if ($?sc == 0) then
  echo "    lmgw : invoking echo 0|$nfpgw/hchknw >lchknw"
  if ($noexec == 0) then
    echo 0|$nfpgw/hchknw         >lchknw
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo 1|$nfpgw/hchknw >lchknw"
  if ($noexec == 0) then
    echo 1|$nfpgw/hchknw         >lchknw
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif
if ($noexec == 0 && ! -e NW) then
  echo "no file NW created ... aborting"
  exit -1
endif
if ($noexec == 0) then
if ($noexec == 0 && `head -1 NW | awk '{print ($1>0)?1:0}'` < 0) then
  echo "first line in file NW < 0 ... aborting"
  exit -1
endif
endif

# ----------------------------- Total energy branch -----------------------------
if ($?etot) then

#--- Core-core exchange ---
echo "    lmgw : invoking echo 5|$nfpgw/hbasfp0  >lexxCC"
if ($noexec == 0) then
  echo 5|$nfpgw/hbasfp0  >lexxCC
  echo ' --- Ex(core-core)   in TEEXXcc = ' `head -5  TEEXXcc | tail -1|awk '{print $1}'`  'eV'
endif

#--- Core-valence exchange ---
echo "    lmgw : invoking echo 6|$nfpgw/hbasfp0  >lbasCV"
echo "                    echo 0|$nfpgw/hvccfp0  >lvccCV"
echo "                    echo 6|$nfpgw/hsfp0    >lexxCV"
if ($noexec == 0) then
  echo 6|$nfpgw/hbasfp0  >lbasCV
  echo 0|$nfpgw/hvccfp0  >lvccCV
  echo 6|$nfpgw/hsfp0    >lexxCV
  echo ' --- 2*Ex(core-val) in TEEXXcv = ' `head -5  TEEXXcv | tail -1|awk '{print 2*$1}'` 'eV'
endif

#--- Valence-valence exchange ---
echo "    lmgw : invoking echo 7|$nfpgw/hbasfp0 >lbasVV"
echo "                    echo 0|$nfpgw/hvccfp0 >lvccVV"
echo "                    echo 5|$nfpgw/hsfp0   >lexxVV"
if ($noexec == 0) then
  echo 7|$nfpgw/hbasfp0 >lbasVV
  echo 0|$nfpgw/hvccfp0 >lvccVV
  echo 5|$nfpgw/hsfp0   >lexxVV
  echo ' --- Ex(val-val)    in TEEXXvv = ' `head -5  TEEXXvv | tail -1|awk '{print $1}'` 'eV'
endif

#--- Correlation ---
echo "    lmgw : invoking echo 0|$nfpgw/hbasfp0  >lbas_cor"
echo "                    echo 0|$nfpgw/hvccfp0  >lvcc_cor"
if ($?htransform) then
echo "                    echo 12|$nfpgw/hx0fp0  >lx0_cor"
else
echo "                    echo 101|$nfpgw/hx0fp0 >lx0_cor"
endif
echo "                    $nfpgw/hecor           >lecor"

if ($noexec == 0) then
  echo 0|$nfpgw/hbasfp0  >lbas_cor
  echo 0|$nfpgw/hvccfp0  >lvcc_cor
if ($?htransform) then
  echo 12 |$nfpgw/hx0fp0 >lx0_cor
else
  echo 101|$nfpgw/hx0fp0 >lx0_cor
endif
  $nfpgw/hecor           >lecor
  echo ' --- Ec             in TEECORR = ' `head -5  TEECORR | tail -1|awk '{print $1}'` 'eV'
endif

#--- Get LDA part of energies ---
echo " "
echo "    lmgw : Generate LDA part of total energies (file log.$argv[1])"
echo "           rm -f log.$argv[1]"
echo "    lmgw : invoking         $lmgw/$lmf --etot --no-iactive $gwargs > llmf_elda"
if ($noexec == 0) then
  rm -f log.$argv[1]
  $lmgw/$lmf --etot --no-iactive $gwargs > llmf_elda
  if ($status) then
    echo "    lmgw: oops! $lmgw/$lmf returned with nonzero exit status ... aborting "
    exit -1
  endif
endif

echo "    lmgw : Extract LDA part of total energies (generate ETOTLDA and RoVxcLDA from file log.$argv[1])"
echo "           rm -f ETOTLDA RoVxcLDA"
echo "           $nfpgw/extract_elda_from_log_file $argv[1]"
echo "           $nfpgw/eout"

if ($noexec == 0) then
                 rm -f ETOTLDA RoVxcLDA
                 $nfpgw/extract_elda_from_log_file $argv[1]
                 set retval = $status
                 if ($retval != 0 && $?retzero) goto error
                 $nfpgw/eout
endif

exit
endif
# ----------------------------- End of Total energy branch -----------------------------
endif

#--- Core exchange ---
#... product basis for core
echo "    lmgw : invoking echo 3|$nfpgw/hbasfp0 >lbasC"
if ($noexec == 0) then
  echo 3|$nfpgw/hbasfp0 >lbasC
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif
# ... Coulomb matrix
echo "    lmgw : invoking echo 0|$nfpgw/hvccfp0 >lvccC"
if ($noexec == 0) then
  echo 0|$nfpgw/hvccfp0 >lvccC
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif
# ... Self energy from core1
if ($?sc) then
  echo "    lmgw : invoking echo 3|$nfpgw/hsfp0_sc >lsxC"
  if ($noexec == 0) then
    echo 3|$nfpgw/hsfp0_sc  >lsxC
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo 3|$nfpgw/hsfp0 >lsxC"
  if ($noexec == 0) then
    echo 3|$nfpgw/hsfp0   >lsxC
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif

#--- Valence part of the self-energy ---
echo "    lmgw : invoking echo 0|$nfpgw/hbasfp0 >lbas"
if ($noexec == 0) then
  echo 0|$nfpgw/hbasfp0 >lbas
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif
# ... Coulomb matrix
echo "    lmgw : invoking echo 0|$nfpgw/hvccfp0 >lvcc"
if ($noexec == 0) then
  echo 0|$nfpgw/hvccfp0 >lvcc
  set retval = $status
  if ($retval != 0 && $?retzero) goto error
endif

#--- Exchange self energy from valence core2+valence electrons ---
if ($?sc) then
  echo "    lmgw : invoking echo 1|$nfpgw/hsfp0_sc >lsx"
  if ($noexec == 0) then
    echo 1|$nfpgw/hsfp0_sc >lsx
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else if ($?htransform) then
  echo "    lmgw : invoking echo 11|$nfpgw/hsfp0 >lsx"
  if ($noexec == 0) then
    echo 11|$nfpgw/hsfp0   >lsx
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo 1|$nfpgw/hsfp0 >lsx"
  if ($noexec == 0) then
    echo 1|$nfpgw/hsfp0   >lsx
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif

#--- Screened coulomb interaction ---
if ($?sc) then
  echo "    lmgw : invoking echo 11|$nfpgw/hx0fp0_sc >lx0"
  if ($noexec == 0) then
    echo 11|$nfpgw/hx0fp0_sc >lx0
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif

#   echo "    lmgw : invoking echo 1|$nfpgw/hx0fp0_sc >lx0 ... to avoid HT bug"
#   if ($noexec == 0) then
#     echo 1|$nfpgw/hx0fp0_sc >lx0
#     set retval = $status
#     if ($retval != 0 && $?retzero) goto error
#   endif


else if ($?htransform) then
  echo "    lmgw : invoking echo 11|$nfpgw/hx0fp0 >lx0"
  if ($noexec == 0) then
    echo 11|$nfpgw/hx0fp0 >lx0
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo 1|$nfpgw/hx0fp0 >lx0"
  if ($noexec == 0) then
    echo 1|$nfpgw/hx0fp0  >lx0
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif

#--- Correlation self-energy from valence core2+valence electrons ---
hsfp0entry:
if ($?sc) then
  echo "    lmgw : invoking echo 2|$nfpgw/hsfp0_sc  >lsc"
  if ($noexec == 0) then
    echo 2|$nfpgw/hsfp0_sc  >lsc
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else if ($?htransform) then
  echo "    lmgw : invoking echo 12|$nfpgw/hsfp0  >lsc"
  if ($noexec == 0) then
    echo 12|$nfpgw/hsfp0  >lsc
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo 2|$nfpgw/hsfp0 >lsc"
  if ($noexec == 0) then
    echo 2|$nfpgw/hsfp0   >lsc
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif

#--- Make summary  ---
if ($?sc) then
  echo "    lmgw : invoking echo $nocc|$nfpgw/hqpe_sc >lqpe"
  if ($noexec == 0) then
    echo $nocc | $nfpgw/hqpe_sc    >lqpe
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else if ($?metal) then
  echo "    lmgw : invoking echo 0|$nfpgw/hqpe >lqpe"
  if ($noexec == 0) then
    echo 0|$nfpgw/hqpe    >lqpe
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
  echo "    lmgw : invoking $nfpgw/hqpemetal $argv[1] >lqpemetal"
  if ($noexec == 0) then
    $nfpgw/hqpemetal $argv[1] >lqpemetal
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
else
  echo "    lmgw : invoking echo $nocc | $nfpgw/hqpe >lqpe"
  if ($noexec == 0) then
    echo $nocc | $nfpgw/hqpe    >lqpe
    set retval = $status
    if ($retval != 0 && $?retzero) goto error
  endif
endif

# --- Self-consistency in the density ---
if ($?bnds && $?sc) then
  echo "           ln -s -f sigm sigm.$argv[1]"
  if ($noexec == 0) then
                   ln -s -f sigm sigm.$argv[1]
  endif
  echo "    lmgw : invoking         $lmgw/$lmf --no-iactive $bnds $gwargs > llmf-bnds"
  if ($noexec == 0) then
    $lmgw/$lmf --no-iactive $bnds $gwargs > llmf-bnds
    if ($status) then
      echo "    lmgw: oops! $lmgw/$lmf returned with nonzero exit status ... aborting "
      exit -1
    endif
  endif
#    if ($?insul && -e bnds.$argv[1]) then
#      set quiet
#      findcmd chk11a fixef change-bnds-ef "$path" "no"
#      chk11a:
#      if ($?fixef) then
#        echo "    lmgw : invoking         $fixef -n=$insul bnds.$argv[1]"
#        if ($noexec == 0) then
#          $fixef -n=$insul bnds.$argv[1]
#        endif
#      endif
#      exit
#    endif
endif

exit
# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label program-name executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prognam = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... no executable $prog_cmd found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

exit
usage:
echo 'usage : lmgw [--switches] extension'
echo '        switches:'
echo '          --help'
echo '          --h'
echo '            show this message'
echo ' '
echo '          --metal'
echo ' '
echo '          --insul=# insulator, with # occupied bands (only affects QP* file)'
echo ' '
echo '          --ht'
echo  '             generate imaginary weights in hx0fp0 and'
echo  '             real weights from Hilbert transform (S. Faleev).'
echo ' '
echo '          --scrho'
echo  '             make density self-consistent before GW calculation'
echo ' '
echo '          --sc'
echo  '             make output sigma needed for self-consistency cycle'
echo  '             NB: --sc implies --ht for now'
echo ' '
echo '          --etot'
echo  '             make LW total energy'
echo  '             NB: No self-energies are computed.  Not compatible with --sc or --eps'
echo ' '
echo '          --eps'
echo  '             make dielectric function'
echo  '             NB: No self-energies are computed.  Not compatible with --sc or --etot'
echo ' '
echo '          --epsNLF'
echo  '             make dielectric function without local-field correction'
echo  '             NB: No self-energies are computed'
echo ' '
echo '          --band[:args]'
echo  '             generate energy bands after GW pass'
echo  '             NB: In conjunction with --sc switch,  uses lmf --band:args'
echo  '                 Otherwise, uses band mode 4 of lmfgw'
#  echo ' '
#  echo '          --hsfp0'
#  echo  '             Rerun hsfp0 --- permitted to use different esigcut from GWIN0?'
echo ' '
echo '          --bin=dir'
echo '           -bin=dir'
echo  '             combination of switches --lmbin and --gwbin'
echo ' '
echo '          --lmbin=dir'
echo '           -lmbin=dir'
echo  '             take LDA binaries lmf, lmfgw, and lmf2gw from directory "dir".'
echo  '             Default is directory containing this script ('"$0:h)"
echo ' '
echo '          --gwbin=dir'
echo '           -gwbin=dir'
echo  '             take GW binaries from directory "dir".'
echo  '             Default is directory containing this script ('"$0:h)"
echo ' '
echo '          --big'
echo  '             use binaries lm-big and lmfgw-big'
echo ' '
echo '          -vVAR=VAL'
echo  '             assign VAR to VAL, and pass to LDA programs lmf, lmfgw'
echo ' '
echo '          --noexec'
echo  '             show what codes would execute without executing them'
echo ' '
echo '          --getsigp'
echo  '             (only used in conjunction with the --sc switch)'
echo  '             Get some parameters for GWinput or GWIN0 file.'
echo  '             Equivalent to --getesig and --getnk and,'
echo  '             (if --multitet not specified) --multitet=no'
echo ' '
echo '          --getesig'
echo  '             Before execution, alter esigcut in file GWinput or GWIN0 to the following:'
echo  '             Extract the contents of SIGP:emax and add 0.5 Ry.'
echo  '             NB: only used in conjunction with the --sc switch'
echo ' '
echo '          --getnk'
echo  '             Before execution, alter nk in file GWinput or GWIN0 to the following:'
echo  '             Extract the contents of SIGP:emax and add 0.5 Ry.'
echo  '             NB: only used in conjunction with the --sc switch'
echo ' '
echo '          --multitet'
echo  '             Before execution, uncomment multitet line in file GWinput'
echo  '             NB: only used in conjunction with the --sc switch'
echo ' '
echo '          --multitet=no'
echo  '             Before execution, comment multitet line in file GWinput'
echo  '             NB: only used in conjunction with the --sc switch'
exit -1

error:
echo "lmgw (abort): program failed to return with zero value"
exit -1
