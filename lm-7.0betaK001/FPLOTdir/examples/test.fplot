#!/bin/csh -f

# This shell script tests the functioning of program fplot

alias call 'set retcall = \!\!:2 ; set callarg = \!\!:3 ; goto \!\!:1'
alias runjob 'set retcall = \!\!:1; set outfile = \!\!:2 ; set callarg = \!\!:3 ; goto runjob'
alias runrdcmd 'set retcall = \!\!:1; set rdcmdfmt = \!\!:2 ; set outfile = \!\!:3 ; set callarg = \!\!:4 ; goto runrdcmd'
alias findcmd  'set retcall = \!\!:1 ; set prog_cmd = \!\!:2 ; set path_name = \!\!:3 ; set make_path = \!\!:4 ; goto findcmd'
alias compare_res 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set refvar = \!\!:4 ; set tol = \!\!:5 ; set passvar = \!\!:6 ; goto compare_res'
alias compare_res_0 'set retcall = \!\!:1; set keyword = \!\!:2 ; set testvar = \!\!:3 ; set tol = \!\!:4 ; set passvar = \!\!:5 ; goto compare_res_0'
alias cnvt_d_fmt  'set retcall = \!\!:1; set testvar = \!\!:2 ; set testval = \!\!:3 ; goto cnvt_d_fmt'
alias query 'set retcall = \!\!:1 ; set retcall2 = \!\!:2 ; set callarg = \!\!:3 ; goto query'

set a
set slow
set testfile = $0
set testdir = $testfile:h
if ($testdir == $testfile) set testdir = .
#  set etcdir  = `cd $testdir/../etc; pwd`
set topdir  = `cd $testdir/..; pwd`
set zdiff   = zdiff
set zcmp    = zcmp
set space = '        '
set failed = 0

# Prepend current working-directory, top-level dir and maindir to path
set path = (. $topdir $path)

# --- Pick off switches ---
while (`echo $1 | sed -e 's/\(.\).*/\1/' `  ==  "-")

  set arg1 = $1; shift
  if ($?verb) echo test.lm: parsing switch $arg1
  switch ($arg1)
    case "--quiet":
      set quiet
      unset slow
      breaksw
    case "--add0":
      set ladd0
      breaksw
    case "--downfold":
      set downfold
      breaksw
    case "--no-iact*":
      unset slow
      breaksw
    case "--verb*":
      set verb = 1
      breaksw
    case "--all":
      breaksw
    default:
      echo unrecognized switch $arg1
      echo 'usage: test.fplot [switches] [test-list]'
      echo '       test-list is a list of test cases, e.g., run tests 1 and 2 with'
      echo '       "test.fplot 1 2"'
      echo '       switches:'
      echo '       --no-iactive runs tests without prompting user'
      echo '       --quiet runs tests without prompting user'
      echo '       --verbose    script prints out extra information'
      exit -1
  endsw

end

set joblist = ($argv)
if ($#joblist == 0 ) set joblist = (1 2 3 4 5 6 7)

if (! $?quiet) then
  echo " "
  echo "$space test.fplot:  tests program fplot"
endif

echo $joblist | grep 1 >/dev/null
if ($status) goto chk1e
cat <<EOF

         --- Test 1.  x-y plot ---
         Illustrates and checks functioning of x-y plot mode.
         Compares density-of-states in Al make by the analytic quadratic
         integration method to that of free-electrons.

         Program fplot creates output file 'ps.dat' which you can view
         through 'ghostview' or your favorite postscript viewer.
         
EOF
call query chk11 'run this test'
chk11:
set pass
if ($a == "s") goto chk1e

# ... Look for executables
findcmd chk11a fplot "$path" "$topdir"
chk11a:

# ... Assign output file names

set refout=$testdir/out.dos.al testout=out.fplot
set refps=$testdir/dos.al.ps.gz testps=ps.dat

cat <<END

         ... Executing the following fplot command:
      fplot -frme 0,1,0,0.5 -frmt 2 \
      -p0 -x -0.9,0.1 -y 0,6.5 -tmx 0.1:1 -tmy 1:1 \
      -xl 'Energy (Ry)' -yl 'Density of States\(states/Ry/atom)' \
      -font t14 -k -0.85,5.5 \
      -lt 1,bold=3,col=.2,.4,.6 -l 'Al' -nc=2 $testdir/qdos.al \
      -lt 3,bold=5,col=.6,.4,.2 -l 'Free-electrons' \
      -ord '5.6026*(x+0.8575)^0.5' -tp -0.857:0.1:0.001 \
      -lt 2,bold=2,2,.3,.5,.3 -tp 2~-0.0237,6.5,-0.0237,0 \
      -font t18 \
      -lblm 10.8,17 rc 'density of states in aluminium' >$testout

END
      fplot -frme 0,1,0,0.5 -frmt 2 \
      -p0 -x -0.9,0.1 -y 0,6.5 -tmx 0.1:1 -tmy 1:1 \
      -xl 'Energy (Ry)' -yl 'Density of States\(states/Ry/atom)' \
      -font t14 -k -0.85,5.5 \
      -lt 1,bold=3,col=.2,.4,.6 -l 'Al' -nc=2 $testdir/qdos.al \
      -lt 3,bold=5,col=.6,.4,.2 -l 'Free-electrons' \
      -ord '5.6026*(x+0.8575)^0.5' -tp -0.857:0.1:0.001 \
      -lt 2,bold=2,2,.3,.5,.3 -tp 2~-0.0237,6.5,-0.0237,0 \
      -font t18 \
      -lblm 10.8,17 rc 'density of states in aluminium' >$testout

call zdiffiles chk13 "xxx 1 $testout $refout"
chk13:

set ndig = 4
call zcmpnfiles chk14 "$ndig $testps $refps"
chk14:
echo -n "$space ... files $testps and $refps equivalent to $ndig digits? ... "
if ($retval == 0) then
  echo  yes
else
  set ndig = 3
  call zcmpnfiles chk14a "$ndig $testps $refps"
  chk14a:
  echo -n "no ... to $ndig digits? ... "
  if ($retval == 0) then
    echo yes
  else if (`echo ' ' | awk -v ndiff=$retval -v ntot=$ncharfile '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($retval difference(s) of $ncharfile)"
  else
    echo no "($retval difference(s) remaining of $ncharfile)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 1 PASSED"
else
    echo "$space test 1 FAILED"
    set failed = ($failed 1)
endif
chk1e:

echo $joblist | grep 2 >/dev/null
if ($status) goto chk2e
cat <<EOF

         --- Test 2.  Contour plot ---
         Illustrates and checks the contour-plot mode.
         Shows charge density contours in Cr.

         Program fplot creates output file 'ps.dat' which you can view
         through 'ghostview' or your favorite postscript viewer.

EOF
call query chk21 'run this test'
chk21:
set pass
if ("$a" == "s") goto chk2e

# ... Look for executables
findcmd chk21a fplot "$path" "$topdir"
chk21a:

# ... Assign output file names

set refout=$testdir/out.contours.cr testout=out.fplot
set refps=$testdir/contours.cr.ps.gz testps=ps.dat

cat <<END

         ... Executing the following fplot command:
      fplot -pr40 -frme 0,'sqrt(0.5)',0,1 -tmx '1;0' -tmy '1;0' -noxn -noyn \
      -x 0,1 -y 0,1 -con 0.045,0.055,0.065,0.075 -nc=101 $testdir/chgd.cr \
      -font t18 \
      -font h14 \
      -lblu 0.17,0.556 cc '45' \
      -lblu 0.28,0.355 cc '55' \
      -lblm 10.8,54.4 rc 'charge density in bcc Chromium' \
      -lblm 10.8,24.4 rc 'contours: 45,55,65,75 (10^{-3} a.u.)' >$testout
END
      fplot -pr40 -frme 0,'sqrt(0.5)',0,1 -tmx '1;0' -tmy '1;0' -noxn -noyn \
      -x 0,1 -y 0,1 -con 0.045,0.055,0.065,0.075 -nc=101 $testdir/chgd.cr \
      -font t18 \
      -font h14 \
      -lblu 0.17,0.556 cc '45' \
      -lblu 0.28,0.355 cc '55' \
      -lblm 10.8,54.4 rc 'charge density in bcc Chromium' \
      -lblm 10.8,24.4 rc 'contours: 45,55,65,75 (10^{-3} a.u.)' >$testout

call zdiffiles chk23 "xxx 1 $testout $refout"
chk23:

set ndig = 4
call zcmpnfiles chk24 "$ndig $testps $refps"
chk24:
echo -n "$space ... files $testps and $refps equivalent to $ndig digits? ... "
if ($retval == 0) then
  echo  yes
else
  set ndig = 3
  call zcmpnfiles chk24a "$ndig $testps $refps"
  chk24a:
  echo -n "no ... to $ndig digits? ... "
  if ($retval == 0) then
    echo yes
  else if (`echo ' ' | awk -v ndiff=$retval -v ntot=$ncharfile '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($retval difference(s) of $ncharfile)"
  else
    echo no "($retval difference(s) remaining of $ncharfile)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 2 PASSED"
else
    echo "$space test 2 FAILED"
    set failed = ($failed 2)
endif
chk2e:

echo $joblist | grep 3 >/dev/null
if ($status) goto chk3e
cat <<EOF

         --- Test 3.  Text handling ---
         Illustrates text string handling in fplot

EOF
call query chk31 'run this test'
chk31:
set pass
if ("$a" == "s") goto chk3e

# ... Look for executables
findcmd chk31a fplot "$path" "$topdir"
chk31a:

# ... Assign output file names

set refout=$testdir/out.text testout=out.fplot
set refps=$testdir/ps.text.gz testps=ps.dat

cat <<END

         ... Executing the following fplot command:
      fplot -f $testdir/plot.text >$testout
END
      fplot -f $testdir/plot.text >$testout

call zdiffiles chk33 "xxx 1 $testout $refout"
chk33:

set ndig = 4
call zcmpnfiles chk34 "$ndig $testps $refps"
chk34:
echo -n "$space ... files $testps and $refps equivalent to $ndig digits? ... "
if ($retval == 0) then
  echo  yes
else
  set ndig = 3
  call zcmpnfiles chk34a "$ndig $testps $refps"
  chk34a:
  echo -n "no ... to $ndig digits? ... "
  if ($retval == 0) then
    echo yes
  else if (`echo ' ' | awk -v ndiff=$retval -v ntot=$ncharfile '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($retval difference(s) of $ncharfile)"
  else
    echo no "($retval difference(s) remaining of $ncharfile)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 3 PASSED"
else
    echo "$space test 3 FAILED"
    set failed = ($failed 3)
endif
chk3e:

echo $joblist | grep 4 >/dev/null
if ($status) goto chk4e
cat <<EOF

         --- Test 4.  axis formatting ---
         Illustrates log scale and exponential format
EOF
call query chk41 'run this test'
chk41:
set pass
if ("$a" == "s") goto chk4e

# ... Look for executables
findcmd chk41a fplot "$path" "$topdir"
chk41a:

# ... Assign output file names

set refout=$testdir/out-log testout=out.fplot
set refps=$testdir/ps.log.gz testps=ps.dat

cat <<END

         ... Executing the following fplot command:
      fplot -p.05 -pr41 -frme 0,1,0,1  '-fmtnx:%;4e' '-fmtny:%;4g' -tmx -1e-6 -k .005,5 -x -5e-6,-1e-6, -y -1e-6,5e-6 -lt 2 -s 2:col=.3,.4,.5:1  -tp 2~-1e-6,.5e-6,-2e-6,1e-6,-3e-6,2e-6,-4e-6,1e-6 >$testout
END
      fplot -p.05 -pr41 -frme 0,1,0,1  '-fmtnx:%;4e' '-fmtny:%;4g' -tmx -1e-6 -k .005,5 -x -5e-6,-1e-6, -y -1e-6,5e-6 -lt 2 -s 2:col=.3,.4,.5:1  -tp 2~-1e-6,.5e-6,-2e-6,1e-6,-3e-6,2e-6,-4e-6,1e-6 >$testout

call zdiffiles chk43 "xxx 1 $testout $refout"
chk43:

set ndig = 4
call zcmpnfiles chk44 "$ndig $testps $refps"
chk44:
echo -n "$space ... files $testps and $refps equivalent to $ndig digits? ... "
if ($retval == 0) then
  echo  yes
else
  set ndig = 3
  call zcmpnfiles chk44a "$ndig $testps $refps"
  chk44a:
  echo -n "no ... to $ndig digits? ... "
  if ($retval == 0) then
    echo yes
  else if (`echo ' ' | awk -v ndiff=$retval -v ntot=$ncharfile '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($retval difference(s) of $ncharfile)"
  else
    echo no "($retval difference(s) remaining of $ncharfile)"
    unset pass
  endif
endif

if ($?pass) then
    echo "$space test 4 PASSED"
else
    echo "$space test 4 FAILED"
    set failed = ($failed 4)
endif
chk4e:

echo $joblist | grep 5 >/dev/null
if ($status) goto chk5e
cat <<EOF

         --- Test 5.  Latex postprocessing ---
         Illustrates LaTex postprocessing of text string handling in fplot.

         This test skips the postprocessing step.  
         You can complete it yourself with these commands:
           latex psfrag.tex
           dvips -E -f psfrag.dvi > ps.dat

         Alternatively, fplot will them automatically carry out 
         the postprocessing by invoking it with the '-disp' switch:

            fplot -disp -f $testdir/plot-tex 

EOF
call query chk51 'run this test'
chk51:
set pass
if ("$a" == "s") goto chk5e

# ... Look for executables
findcmd chk51a fplot "$path" "$topdir"
chk51a:

# ... Assign output file names

set refout=$testdir/out-tex testout=out.fplot
set refps=$testdir/ps.tex.gz testps=ps.dat
set reftex=$testdir/psfrag.tex.gz testtex=psfrag.tex

cat <<END

         ... Executing the following fplot command:
      fplot -f $testdir/plot-tex >$testout
END
      fplot -f $testdir/plot-tex >$testout

call zdiffiles chk53 "xxx 1 $testout $refout"
chk53:

set ndig = 4
call zcmpnfiles chk54 "$ndig $testps $refps"
chk54:
echo -n "$space ... files $testps and $refps equivalent to $ndig digits? ... "
if ($retval == 0) then
  echo  yes
else
  set ndig = 3
  call zcmpnfiles chk54a "$ndig $testps $refps"
  chk54a:
  echo -n "no ... to $ndig digits? ... "
  if ($retval == 0) then
    echo yes
  else if (`echo ' ' | awk -v ndiff=$retval -v ntot=$ncharfile '{print (100*ndiff/ntot<1.)}'` == 1) then
    echo ok "($retval difference(s) of $ncharfile)"
  else
    echo no "($retval difference(s) remaining of $ncharfile)"
    unset pass
  endif
endif

echo ' '
echo -n "$space ... files $testtex identical to $reftex? ... "
$zcmp $testtex $reftex >/dev/null
set retval = $status
if ($retval == 0) then
 echo yes
else
  echo no 
  unset pass
endif


if ($?pass) then
    echo "$space test 5 PASSED"
else
    echo "$space test 5 FAILED"
    set failed = ($failed 5)
endif
chk5e:

echo ' '
if ($#failed <= 1) then
    echo "$space $testfile : all tests PASSED"
    echo " "
    exit 0
else
    shift failed
    echo "$space $testfile : These tests FAILED:" $failed
    echo " "
    exit -1
endif

# ---------------- showout --------------
exit
showout:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  echo ' '
  echo "$space Compare $callarg to line in file $refout":
  grep $callarg $testout
  gunzip -c $refout | grep $callarg
  goto $quitjob

# ---------------- cnvt_d_fmt --------------
# converts exponential format #.##D## or #.##d## to #.##E##
# usage: cnvt_d_fmt retcall testvar testval
exit
cnvt_d_fmt:
  set quitjob = $retcall
  set $testvar = `echo $testval | sed s/D/E/ | sed s/d/E/`
  goto $quitjob

# ---------------- zdiffiles --------------
# calling argument should consist of four strings:
# 1st string = string that terminates zdiff
# 2nd string = integer that counts how many times terminator should occur before terminating
#              -1 -> last occurence
# 3nd string = first file name
# 4th string = second file name
# example: call zdiffiles chk69 "CPU 3 $testout $refout"
exit
zdiffiles:
  set quitjob=$retcall
  if ($?quiet) goto $quitjob
  set files = ($callarg)
  set endstr = $files[1]
  shift files
  set nend = $files[1]
  shift files
  if ($nend == "-1") then
    set nend = `grep "$endstr" $files[1] | wc | awk '{print $1}'`
  endif

#    echo zdiffiles : $quitjob $nend
#    grep $endstr $files[1]

  query zdiff11 $quitjob "compare files  $files"
zdiff11:
  $zdiff $files | awk -v endstr="$endstr" -v nend=$nend -v endl=0 -v endr=0 '{if ($1 == "<" && endl < nend) print ; if ($1 == ">" && endr < nend) print ; if ($1 == ">" || $1 == "<" || endl >= nend && endr >= nend) ; else {print} ; if ($1 == "<" && $2 == endstr) {endl+=1}; if ($1 == ">" && $2 == endstr) {endr+=1};}' | head -50
  echo " "
  goto $quitjob

# ---------------- compare_res --------------
# Compares two numbers $testvar-$refvar and unsets $passvar if |testvar-refvar|<tol
# usage: compares_res retcall keyword testvar refvar tol passvar
#   keyword      : label (for printout)
#   testvar      : first number
#   refvar       : second number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar-refvar|<tol
exit
compare_res:
  set quitjob=$retcall
# echo $retcall $keyword $testvar $refvar $tol $passvar
  echo -n "$space $keyword ($testvar) within tol ($tol) of reference ($refvar)? ... "
  if (`echo $testvar $refvar | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);tl=1.001*tol} print (k<=tl)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- compare_res_0 --------------
# Compares a number $testvar and unsets $passvar if |testvar|<tol
# usage: compares_res_0 retcall keyword testvar tol passvar
# Example:
# compare_res_0 chk274a "Max deviation in pdos from reference" $retval $pdostol pass
#   keyword      : label (for printout)
#   testvar      : first number
#   tol          : tolerance
#   passvar      : $passvar is unset if |testvar|<tol
exit
compare_res_0:
  set quitjob=$retcall
#  echo $retcall $keyword $testvar $tol $passvar
  echo -n "$space $keyword ($testvar) within tol ($tol)? ... "
  if (`echo $testvar 0 | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjob

# ---------------- zcmpmfiles_res_0 --------------
# Compares two files, stripping all but numerical fields.
# Checks for max absolute difference and unsets $passvar if difference<$tol
# Files with .gz or .Z extensions are assumed to be gzipped.
# usage: zcmpnfiles_res_0 retcall keyword testvar tol passvar ndig srcfile reffile
#   retcall      : return to this point in script on exit
#   keyword      : label (for printout)
#   tol          : tolerance in maximum allowed deviation
#   passvar      : $passvar is unset if |testvar|<tol
#   ndig         : number of digits numbers in file are stripped to 
#   srcfile      : first file to compare
#   reffile      : second file to compare
# Example:
# zcmpmfiles_res_0 chk1ck "Max deviation in bnds.$ext from reference" $bndstol pass 4 bnds.$ext $testdir/bnds.$ext.gz
exit
zcmpmfiles_res_0:
  set quitjobl=$retcall
# echo $retcall $keyword $tol $?passvar $ndig $srcfile $reffile

  unset retval
  call zcmpmfiles zcmpmfilesx "$ndig $srcfile $reffile"
zcmpmfilesx:
  echo -n "$space $keyword ($retval) within tol ($tol)? ... "
  if (`echo $retval 0 | awk -v tol=$tol '{{k=($1-$2)>0?($1-$2):($2-$1);} print (k<=tol)}'`) then
    echo yes
  else
    echo no
    unset $passvar
  endif
  goto $quitjobl

# ---------------- zcmpnfiles --------------
# Compares two files, treating each field as a number.
# call arguments should contain 3 strings: no-digits test-file reference-file
# Files with .gz or .Z extensions are assumed to be gzipped.
# Returns with retval = number of differences in reduced files
# Example :  call zcmpnfiles chk25 "6 dos-cls.$ext $testdir/dos-cls.$ext.gz"
# Creates temporary files $testdir/tmp1 $testdir/tmp2
exit
zcmpnfiles:
  set quitjob=$retcall
  set zcmpnargs = ($callarg)
  set digits = $zcmpnargs[1]
# set a = ' { for (i = NF; i > 0; --i) printf " %.'$digits'f", $i; printf "\n" }'
  set a = ' { for (i = 1; i <= NF; i++) { k = sprintf("%.'$digits'f",$i); if (k+k == 0) k = 0 ; printf "%s ", k}; printf "\n" }'

  set fn1 = $testdir/tmp_compnfile_1
  set fn2 = $testdir/tmp_compnfile_2
  if ("$zcmpnargs[2]:e" == 'gz' || "$zcmpnargs[2]:e" == 'Z') then
    set cat1 = 'gunzip -c'
  else    
    set cat1 = cat
  endif
  if ("$zcmpnargs[3]:e" == 'gz' || "$zcmpnargs[3]:e" == 'Z') then
    set cat2 = 'gunzip -c'
  else    
    set cat2 = cat
  endif

  $cat1  $zcmpnargs[2] | sed s/D-/E-/g | sed s/D+/E+/g | awk "$a" > $fn1
  $cat2  $zcmpnargs[3] | sed s/D-/E-/g | sed s/D+/E+/g | awk "$a" > $fn2
  set ncharfile = `wc $fn1 | awk '{print $3}'`
  cmp $fn1 $fn2 >/dev/null
  set retval = $status

  if ($retval == 0) rm -f $fn1 $fn2 
  if ($retval == 0) goto $quitjob

  set retval = `cmp -l $fn1 $fn2 |& grep -v EOF | wc | awk '{printf "%d", $1}'`
  if ($retval == 0) set retval = '-1'
  rm -f $fn1 $fn2 
  goto $quitjob

# ---------------- zcmpmfiles --------------
# Compares two files, treating each field as a number.
# Call arguments should contain 3 strings: no-digits test-file reference-file
# files with .gz or .Z extensions are assumed to be gzipped.
# Returns with retval = max numerical difference
# Example :  call zcmpmfiles chk25 "6 dos-cls.$ext $testdir/dos-cls.$ext.gz"
# Creates temporary files $testdir/tmp1 $testdir/tmp2
exit
zcmpmfiles:
  set quitjob=$retcall
  set zcmpnargs = ($callarg)
  set digits = $zcmpnargs[1]
# set a = ' { for (i = NF; i > 0; --i) printf " %.'$digits'f", $i; printf "\n" }'
  set a = ' { for (i = 1; i <= NF; i++) { k = sprintf("%.'$digits'f",$i); if (k+k == 0) k = 0 ; printf "%s ", k}; printf "\n" }'

  set fn1 = $testdir/tmp_compnfile_1
  set fn2 = $testdir/tmp_compnfile_2
  if ("$zcmpnargs[2]:e" == 'gz' || "$zcmpnargs[2]:e" == 'Z') then
    set cat1 = 'gunzip -c'
  else    
    set cat1 = cat
  endif
  if ("$zcmpnargs[3]:e" == 'gz' || "$zcmpnargs[3]:e" == 'Z') then
    set cat2 = 'gunzip -c'
  else    
    set cat2 = cat
  endif

  $cat1  $zcmpnargs[2] | sed s/D-/E-/g | sed s/D+/E+/g | awk "$a" > $fn1
  $cat2  $zcmpnargs[3] | sed s/D-/E-/g | sed s/D+/E+/g | awk "$a" > $fn2

  set retval = `diff -y --width=300 $fn1 $fn2 | grep '|' | awk -v top=0 '{n=split($0,a,"|"); n1=split(a[1],b1); n2=split(a[2],b2); { j=0; while (j++ < n1) if (j <= n1 && j<=n2) {x = (b1[j]-b2[j])>0?(b1[j]-b2[j]):(b2[j]-b1[j]); top = (top-x)>0?top:x; }}} END {printf "%12.4e\n", top}'`
  rm -f $fn1 $fn2 
  goto $quitjob

# ---------------- runjob --------------
exit
runjob:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space $callarg"
    echo " "
    $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      $callarg >> $appfile
      set retval = $status
    else
      echo "$space $callarg  > $outfile"
      $callarg > $outfile
      set retval = $status
  endif
  if ($retval != 0) goto cleanup
  goto $quitjob


# ---------------- runrdcmd --------------
exit
runrdcmd:
  set quitjob=$retcall
  if ($outfile == ".") then
    echo "$space Invoking rdcmd will execute the following job(s):"
    $rdcmd -f:$rdcmdfmt --n $callarg
    echo "$space $rdcmd '-f:rdcmd:%2f' $callarg"
                 $rdcmd '-f:rdcmd:%2f' $callarg
    set retval = $status
  else
    if (`echo $outfile | awk '{print substr($1,1,2)}'` == '>>') then
      set appfile = `echo $outfile | awk '{print substr($1,3)}'`
      echo "$space $callarg  >> $appfile"
      exit
#      $callarg >> $appfile
      set retval = $status
    else
      echo "$space Invoking rdcmd will execute the following job(s):"
      $rdcmd -f:$rdcmdfmt --n $callarg
      echo "$space $rdcmd '-f:#rdcmd:%2f' $callarg  >& $outfile"
                   $rdcmd '-f:rdcmd:%2f' $callarg >& $outfile
      set retval = $status
      if ($retval == 0) then
        echo "$space Job(s) completed successfully; output in $outfile"
      endif
    endif
  endif

  if ($retval == 0) then
    if ($?ladd0) then
      echo -n "         ..." ; $testdir/add0 $testout
    endif
    goto $quitjob
  else
    echo "$space ...oops... the following command returned with nonzero exit status:"
    echo -n "$space   "
    grep $rdcmd: $outfile | tail -1 | sed 's/rdcmd:  //'
    goto cleanup
  endif

# ---------------- findcmd --------------
# Finds an executable program within the supplied path
# Usage: findcmd return_label executable_command path_name make_path
# If $executable_command is not found, findcmd does one of the following:
# If make_path = 'no' : returns silently.
# Otherwise findcmd aborts with a message, which assumes
# $make_path is the path where $executable_command is made.
exit
findcmd:
set found = 'no'
foreach ac_dir ($path_name)
 if (-x $ac_dir/$prog_cmd) then
   set $prog_cmd = $ac_dir/$prog_cmd
   set found = 'yes'
   break
 endif
end
if (! $?quiet) then
  if ($found == 'yes') echo "$space ... using executable $ac_dir/$prog_cmd"
  if ($found == 'no')  echo "$space ... executable $prog_cmd not found in path"
endif
if ($found == 'no' && $make_path != "no") then
  echo "  "
  echo "  Sorry, $testfile cannot find program '"$prog_cmd"' it needs to execute."
  echo "  '"$prog_cmd"' was not found in supplied path, or in the following:"
  echo "        $topdir $maindir"
# echo "  ... This script ($testfile) requires binary "'"rdcmd"'" to run."
  echo "  You must create or put '"$prog_cmd"' in your path before invoking this script."
  echo "  Normally '"$prog_cmd"' is created as part of the installation process."
  echo "  Invoking '"make $prog_cmd"' in $make_path should create it."
  echo "  $testfile aborting ..."
  exit -1
endif
goto $retcall

# ---------------- query --------------
exit
query:
  unset skip
  if ($?slow != 0) then
    echo "$space *hit <return> to $callarg, s <return> to skip it."
    set a = ($<)
    if ($a == "") goto $retcall
    switch ($a)
      case "quit":
      case "q":
      case "a":
        exit
      case "i":
        unset slow
        breaksw
      case "s":
        set skip
        breaksw
      case "t":
        time
        goto query
      default:
        echo 'q to quit; i unsets slow; s skips this job, t shows time'
        goto query
    endsw
  endif
  goto $retcall

# ---------------- cleanup --------------
exit
cleanup:
  if ($retval != 0) echo "$space"'*'"job $callarg[1] returned with error status $retval"
  if ($retval != 0) echo "$space unacceptable error status ... $testfile aborting"
  exit $retval
