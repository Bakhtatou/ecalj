######################################################
#
# $lmdir, which is defined in Makefile in ./ and in other 
# directories, should point at this root directory.
#
######################################################

#### jump to target (keep this as it is) ###
#target:	ALL



############################################
# Libraries BLAS LAPACK FFTW 
############################################
### For a case of ifort.
eee = /home/takao/ecal
LIBLOC = \
  $(eee)/fftw-3.1.2/.libs/libfftw3.a \
  $(eee)/BLASplusLAPACK/LAPACK_A/lapack_a.a \
  $(eee)/BLASplusLAPACK/GotoBLAS/xerbla.o  \
  $(eee)/BLASplusLAPACK/GotoBLAS/libgoto.a 
# -pthread 
# -lsvml
#
### for a case of MPI
#eee = /home/takao/ecal
#LIBLOC = \
#  $(eee)/fftw-3.1.2/.libs/libfftw3.a \
#  /home/takao/SCALAPACK/scalapack.a \
#  /home/takao/BLACS/LIB/blacsF77init_MPI-LINUX-0.a \
#  /home/takao/BLACS/LIB/blacs_MPI-LINUX-0.a \
#  $(eee)/BLASplusLAPACK/LAPACK_A/lapack_a.a \
#  $(eee)/BLASplusLAPACK/GotoBLAS/xerbla.o  \
#  $(eee)/BLASplusLAPACK/GotoBLAS/libgoto.a -pthread 
##-lsvml
#
### kino's case
 LIBLOC= -L$(HOME)/kit/fftw/fftw-3.1.2/.libs/ -lfftw3 \
 $(HOME)/kit/numericallib/LAPACK/lapack_LinuxCore2.a \
 $(HOME)/kit/numericallib/LAPACK/blas_LinuxCore2.a \
 $(HOME)/kit/numericallib/LAPACK/tmglib_LinuxCore2.a 



############################################
# Fortran compiler and flags, and linker 
############################################
#FC = mpif90
#LK = mpif90
FC = ifort
LK = ifort
#
# where is modules?
moddir = MODDIR/
module = -module $(moddir)
#
FFLAGS = -O3 -cm -WB  -cpp $(CPP_SW) $(module) -132
FFLAGS_LESS = -O2 -cm -WB  -cpp $(CPP_SW) $(module) -132
FFLAGS_LESS2 = -O1 -cm -WB -cpp $(CPP_SW) $(module) -132
FFLAGS_LESS3 = -O0 -cm -WB -cpp $(CPP_SW) $(module) -132
FFLAGS_NONE = -g -cm -WB   -cpp $(CPP_SW) $(module) -132
#
# safer option (debug)
#FFLAGS =      -g -cm -WB -cpp $(CPP_SW) $(module) -132
#FFLAGS_LESS = -g -cm -WB -cpp $(CPP_SW) $(module) -132
#FFLAGS_LESS2 = -g -cm -WB -cpp $(CPP_SW) $(module) -132
#FFLAGS_LESS3 = -g -cm -WB -cpp $(CPP_SW) $(module) -132
#FFLAGS_NONE = -g -cm -WB -cpp $(CPP_SW) $(module) -132


###################################################
# CPP switches (instead of old ccomp procedure
###################################################
CPP_SW=-DHASIARGC  -DHASGETARG  -DFDATE  -DHASGETTIMEOFDAY  -DHASGETENVQQ  -DHASSETENVQQ  -DHASIFPORT  
#
#MPI  case add  -UMPE -UMPIK -DMPI 
#
##MPIK case k-point parallelizaion in MPI add -UMPE -DMPIK -UMPI 



################################################
# --- Make rules ---(fixed).
################################################
#.F.o: 
#	$(FC) $(FFLAGS) -c $<
 
#.F.a: 
#	$(FC) $(FFLAGS) -c $<
#	$(AR) $(ARFLAGS) $@ $%
#	rm -f $%



#$(SLATSM)(zhev.o): zhev.F
#	$(FC) $(FFLAGS_NONE) -c zhev.F
#	$(AR) $(ARFLAGS) $(SLATSM) zhev.o
#	rm -f zhev.o





############################################
### Patches for intel ifc ##################
#
# Note that $SLATSM... are defined below.
#
############################################
## ... patch section for ./slatsm/slatsm.a
$(sla_obj_path)/huntx.o:slatsm/huntx.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/hunti.o: slatsm/hunti.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/polcof.o: slatsm/polcof.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/rdfiln.o: slatsm/rdfiln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@

## patch section for ./subs/subs.a
$(subs_obj_path)/ropbes.o: subs/ropbes.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/ropyln.o: subs/ropyln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/spcgrp.o: subs/spcgrp.F
	$(FC) $(FFLAGS_LESS) -c $< -o $@

### these modules requies no optimization ---> safer.
$(subs_obj_path)/m_toksw.o $(moddir)m_toksw.mod $(moddir)m_gtv.mod:	subs/m_toksw.F
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_toksw.o

$(subs_obj_path)/m_rdctrl.o $(moddir)m_rdctrl.mod:	subs/m_rdctrl.F
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrl.o 

$(subs_obj_path)/m_rdctrlchk.o $(moddir)m_rdctrlchk.mod:	subs/m_rdctrlchk.F
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrlchk.o

## ... patch section for ./fp/subs.a
$(fp_obj_path)/rhogkl.o: fp/rhogkl.F
	$(FC) $(FFLAGS_LESS) -c $< -o $@



################################################
# module dependency (fixed). What *.F contains what modules.
################################################
#$(subs_obj_path)/m_rdctrl.o:	$(moddir)m_gtv.mod $(moddir)m_toksw.mod $(subs_obj_path)/m_struc_def.o $(subs_obj_path)/m_struc_func.o 
#$(subs_obj_path)/m_rdctrlchk.o:	$(moddir)m_gtv.mod $(moddir)m_toksw.mod
#$(subs_obj_path)/rdctrl2.o:	$(moddir)m_gtv.mod $(moddir)m_rdctrl.mod $(subs_obj_path)/m_struc_def.o $(subs_obj_path)/m_struc_func.o
#$(subs_obj_path)/rdctrlchk.o:	$(moddir)m_gtv.mod $(moddir)m_rdctrlchk.mod
#$(fp_obj_path)/bndfp.o:	$(moddir)m_rdctrl.mod
#$(gwd_obj_path)/bndfp.o:	$(moddir)m_rdctrl.mod
#


################################################
# archiver (maybe fixed).
################################################
AR := ar
ARFLAGS := rv
RANLIB := ranlib


################################################
# program and libraries (choose one of sections; normal, MPI, or MPIK)
################################################
programs = lmf lmfa lmfgw lmdos lmchk lmf2gw lm67 rdcmd
SUBS   := libsubs.a
FP     := libfp.a
GWD    := libgwd.a
SLATSM := slatsm.a
#NC     = libnc.a
#TB     = libtb.a
#
### MPI case #####
#programs = lmf-MPI lmfgw-MPI
#SUBS   = libsubs-MPI.a
#FP     = libfp-MPI.a
#GWD    = libgwd-MPI.a
#SLATSM = slatsm-MPI.a
#
##### MPIK case ##
#programs = lmf-MPIK lmfgw-MPIK
#SUBS   = libsubs-MPIK.a 
#FP     = libfp-MPIK.a
#GWD    = libgwd-MPIK.a
#SLATSM = slatsm-MPI.a  #slatsm-MPI = slatsm-MPIK


### path to libraries (fixed) #########
LIBSUBS := subs/$(SUBS)
LIBFP   := fp/$(FP)
LIBGWD  := gwd/$(GWD)
LIBSLA  := slatsm/$(SLATSM)
#LIBNC   = nc/$(NC)
#LIBTB   = tb/$(TB)
#LIBES := $(LIBSLA) $(LIBLOC)


#???
# $(LIBSUBS): $(subs_obj)   fails
#	$(AR) $(ARFLAGS) $@ $(subs_obj)
#

subs/$(SUBS):$(subs_obj)
	$(AR) $(ARFLAGS) $@ $(subs_obj)

fp/$(FP): $(fp_obj)
	$(AR) $(ARFLAGS) $@ $(fp_obj)

slatsm/$(SLATSM): $(sla_obj)
	$(AR) $(ARFLAGS) $@ $(sla_obj)

gwd/$(GWD): $(gwd_obj)
	$(AR) $(ARFLAGS) $@ $(gwd_obj)




